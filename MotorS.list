
MotorS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002fa0  08002fa0  00003fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800304c  0800304c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800304c  0800304c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800304c  0800304c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800304c  0800304c  0000404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003050  08003050  00004050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003054  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003060  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003060  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000846d  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ac  00000000  00000000  0000d4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0000eb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ab  00000000  00000000  0000f528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000114c6  00000000  00000000  0000fcd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3ab  00000000  00000000  00021199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bb29  00000000  00000000  0002c544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009806d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000248c  00000000  00000000  000980b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0009a53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f88 	.word	0x08002f88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002f88 	.word	0x08002f88

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fb26 	bl	8000878 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fad1 	bl	80007d8 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f927 	bl	8000490 <__aeabi_fsub>
 8000242:	f000 fac9 	bl	80007d8 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fdiv>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	464f      	mov	r7, r9
 8000254:	4646      	mov	r6, r8
 8000256:	46d6      	mov	lr, sl
 8000258:	0244      	lsls	r4, r0, #9
 800025a:	b5c0      	push	{r6, r7, lr}
 800025c:	0047      	lsls	r7, r0, #1
 800025e:	1c0e      	adds	r6, r1, #0
 8000260:	0a64      	lsrs	r4, r4, #9
 8000262:	0e3f      	lsrs	r7, r7, #24
 8000264:	0fc5      	lsrs	r5, r0, #31
 8000266:	2f00      	cmp	r7, #0
 8000268:	d03c      	beq.n	80002e4 <__aeabi_fdiv+0x94>
 800026a:	2fff      	cmp	r7, #255	@ 0xff
 800026c:	d042      	beq.n	80002f4 <__aeabi_fdiv+0xa4>
 800026e:	2300      	movs	r3, #0
 8000270:	2280      	movs	r2, #128	@ 0x80
 8000272:	4699      	mov	r9, r3
 8000274:	469a      	mov	sl, r3
 8000276:	00e4      	lsls	r4, r4, #3
 8000278:	04d2      	lsls	r2, r2, #19
 800027a:	4314      	orrs	r4, r2
 800027c:	3f7f      	subs	r7, #127	@ 0x7f
 800027e:	0273      	lsls	r3, r6, #9
 8000280:	0a5b      	lsrs	r3, r3, #9
 8000282:	4698      	mov	r8, r3
 8000284:	0073      	lsls	r3, r6, #1
 8000286:	0e1b      	lsrs	r3, r3, #24
 8000288:	0ff6      	lsrs	r6, r6, #31
 800028a:	2b00      	cmp	r3, #0
 800028c:	d01b      	beq.n	80002c6 <__aeabi_fdiv+0x76>
 800028e:	2bff      	cmp	r3, #255	@ 0xff
 8000290:	d013      	beq.n	80002ba <__aeabi_fdiv+0x6a>
 8000292:	4642      	mov	r2, r8
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	00d2      	lsls	r2, r2, #3
 8000298:	04c9      	lsls	r1, r1, #19
 800029a:	4311      	orrs	r1, r2
 800029c:	4688      	mov	r8, r1
 800029e:	2000      	movs	r0, #0
 80002a0:	3b7f      	subs	r3, #127	@ 0x7f
 80002a2:	0029      	movs	r1, r5
 80002a4:	1aff      	subs	r7, r7, r3
 80002a6:	464b      	mov	r3, r9
 80002a8:	4071      	eors	r1, r6
 80002aa:	b2c9      	uxtb	r1, r1
 80002ac:	2b0f      	cmp	r3, #15
 80002ae:	d900      	bls.n	80002b2 <__aeabi_fdiv+0x62>
 80002b0:	e0b5      	b.n	800041e <__aeabi_fdiv+0x1ce>
 80002b2:	4a74      	ldr	r2, [pc, #464]	@ (8000484 <__aeabi_fdiv+0x234>)
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	58d3      	ldr	r3, [r2, r3]
 80002b8:	469f      	mov	pc, r3
 80002ba:	4643      	mov	r3, r8
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d13f      	bne.n	8000340 <__aeabi_fdiv+0xf0>
 80002c0:	3fff      	subs	r7, #255	@ 0xff
 80002c2:	3302      	adds	r3, #2
 80002c4:	e003      	b.n	80002ce <__aeabi_fdiv+0x7e>
 80002c6:	4643      	mov	r3, r8
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d12d      	bne.n	8000328 <__aeabi_fdiv+0xd8>
 80002cc:	2301      	movs	r3, #1
 80002ce:	0029      	movs	r1, r5
 80002d0:	464a      	mov	r2, r9
 80002d2:	4071      	eors	r1, r6
 80002d4:	b2c9      	uxtb	r1, r1
 80002d6:	431a      	orrs	r2, r3
 80002d8:	2a0e      	cmp	r2, #14
 80002da:	d838      	bhi.n	800034e <__aeabi_fdiv+0xfe>
 80002dc:	486a      	ldr	r0, [pc, #424]	@ (8000488 <__aeabi_fdiv+0x238>)
 80002de:	0092      	lsls	r2, r2, #2
 80002e0:	5882      	ldr	r2, [r0, r2]
 80002e2:	4697      	mov	pc, r2
 80002e4:	2c00      	cmp	r4, #0
 80002e6:	d113      	bne.n	8000310 <__aeabi_fdiv+0xc0>
 80002e8:	2304      	movs	r3, #4
 80002ea:	4699      	mov	r9, r3
 80002ec:	3b03      	subs	r3, #3
 80002ee:	2700      	movs	r7, #0
 80002f0:	469a      	mov	sl, r3
 80002f2:	e7c4      	b.n	800027e <__aeabi_fdiv+0x2e>
 80002f4:	2c00      	cmp	r4, #0
 80002f6:	d105      	bne.n	8000304 <__aeabi_fdiv+0xb4>
 80002f8:	2308      	movs	r3, #8
 80002fa:	4699      	mov	r9, r3
 80002fc:	3b06      	subs	r3, #6
 80002fe:	27ff      	movs	r7, #255	@ 0xff
 8000300:	469a      	mov	sl, r3
 8000302:	e7bc      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000304:	230c      	movs	r3, #12
 8000306:	4699      	mov	r9, r3
 8000308:	3b09      	subs	r3, #9
 800030a:	27ff      	movs	r7, #255	@ 0xff
 800030c:	469a      	mov	sl, r3
 800030e:	e7b6      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000310:	0020      	movs	r0, r4
 8000312:	f000 fabb 	bl	800088c <__clzsi2>
 8000316:	2776      	movs	r7, #118	@ 0x76
 8000318:	1f43      	subs	r3, r0, #5
 800031a:	409c      	lsls	r4, r3
 800031c:	2300      	movs	r3, #0
 800031e:	427f      	negs	r7, r7
 8000320:	4699      	mov	r9, r3
 8000322:	469a      	mov	sl, r3
 8000324:	1a3f      	subs	r7, r7, r0
 8000326:	e7aa      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000328:	4640      	mov	r0, r8
 800032a:	f000 faaf 	bl	800088c <__clzsi2>
 800032e:	4642      	mov	r2, r8
 8000330:	1f43      	subs	r3, r0, #5
 8000332:	409a      	lsls	r2, r3
 8000334:	2376      	movs	r3, #118	@ 0x76
 8000336:	425b      	negs	r3, r3
 8000338:	1a1b      	subs	r3, r3, r0
 800033a:	4690      	mov	r8, r2
 800033c:	2000      	movs	r0, #0
 800033e:	e7b0      	b.n	80002a2 <__aeabi_fdiv+0x52>
 8000340:	2303      	movs	r3, #3
 8000342:	464a      	mov	r2, r9
 8000344:	431a      	orrs	r2, r3
 8000346:	4691      	mov	r9, r2
 8000348:	2003      	movs	r0, #3
 800034a:	33fc      	adds	r3, #252	@ 0xfc
 800034c:	e7a9      	b.n	80002a2 <__aeabi_fdiv+0x52>
 800034e:	000d      	movs	r5, r1
 8000350:	20ff      	movs	r0, #255	@ 0xff
 8000352:	2200      	movs	r2, #0
 8000354:	05c0      	lsls	r0, r0, #23
 8000356:	07ed      	lsls	r5, r5, #31
 8000358:	4310      	orrs	r0, r2
 800035a:	4328      	orrs	r0, r5
 800035c:	bce0      	pop	{r5, r6, r7}
 800035e:	46ba      	mov	sl, r7
 8000360:	46b1      	mov	r9, r6
 8000362:	46a8      	mov	r8, r5
 8000364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000366:	000d      	movs	r5, r1
 8000368:	2000      	movs	r0, #0
 800036a:	2200      	movs	r2, #0
 800036c:	e7f2      	b.n	8000354 <__aeabi_fdiv+0x104>
 800036e:	4653      	mov	r3, sl
 8000370:	2b02      	cmp	r3, #2
 8000372:	d0ed      	beq.n	8000350 <__aeabi_fdiv+0x100>
 8000374:	2b03      	cmp	r3, #3
 8000376:	d033      	beq.n	80003e0 <__aeabi_fdiv+0x190>
 8000378:	46a0      	mov	r8, r4
 800037a:	2b01      	cmp	r3, #1
 800037c:	d105      	bne.n	800038a <__aeabi_fdiv+0x13a>
 800037e:	2000      	movs	r0, #0
 8000380:	2200      	movs	r2, #0
 8000382:	e7e7      	b.n	8000354 <__aeabi_fdiv+0x104>
 8000384:	0035      	movs	r5, r6
 8000386:	2803      	cmp	r0, #3
 8000388:	d07a      	beq.n	8000480 <__aeabi_fdiv+0x230>
 800038a:	003b      	movs	r3, r7
 800038c:	337f      	adds	r3, #127	@ 0x7f
 800038e:	2b00      	cmp	r3, #0
 8000390:	dd2d      	ble.n	80003ee <__aeabi_fdiv+0x19e>
 8000392:	4642      	mov	r2, r8
 8000394:	0752      	lsls	r2, r2, #29
 8000396:	d007      	beq.n	80003a8 <__aeabi_fdiv+0x158>
 8000398:	220f      	movs	r2, #15
 800039a:	4641      	mov	r1, r8
 800039c:	400a      	ands	r2, r1
 800039e:	2a04      	cmp	r2, #4
 80003a0:	d002      	beq.n	80003a8 <__aeabi_fdiv+0x158>
 80003a2:	2204      	movs	r2, #4
 80003a4:	4694      	mov	ip, r2
 80003a6:	44e0      	add	r8, ip
 80003a8:	4642      	mov	r2, r8
 80003aa:	0112      	lsls	r2, r2, #4
 80003ac:	d505      	bpl.n	80003ba <__aeabi_fdiv+0x16a>
 80003ae:	4642      	mov	r2, r8
 80003b0:	4b36      	ldr	r3, [pc, #216]	@ (800048c <__aeabi_fdiv+0x23c>)
 80003b2:	401a      	ands	r2, r3
 80003b4:	003b      	movs	r3, r7
 80003b6:	4690      	mov	r8, r2
 80003b8:	3380      	adds	r3, #128	@ 0x80
 80003ba:	2bfe      	cmp	r3, #254	@ 0xfe
 80003bc:	dcc8      	bgt.n	8000350 <__aeabi_fdiv+0x100>
 80003be:	4642      	mov	r2, r8
 80003c0:	0192      	lsls	r2, r2, #6
 80003c2:	0a52      	lsrs	r2, r2, #9
 80003c4:	b2d8      	uxtb	r0, r3
 80003c6:	e7c5      	b.n	8000354 <__aeabi_fdiv+0x104>
 80003c8:	2280      	movs	r2, #128	@ 0x80
 80003ca:	2500      	movs	r5, #0
 80003cc:	20ff      	movs	r0, #255	@ 0xff
 80003ce:	03d2      	lsls	r2, r2, #15
 80003d0:	e7c0      	b.n	8000354 <__aeabi_fdiv+0x104>
 80003d2:	2280      	movs	r2, #128	@ 0x80
 80003d4:	03d2      	lsls	r2, r2, #15
 80003d6:	4214      	tst	r4, r2
 80003d8:	d002      	beq.n	80003e0 <__aeabi_fdiv+0x190>
 80003da:	4643      	mov	r3, r8
 80003dc:	4213      	tst	r3, r2
 80003de:	d049      	beq.n	8000474 <__aeabi_fdiv+0x224>
 80003e0:	2280      	movs	r2, #128	@ 0x80
 80003e2:	03d2      	lsls	r2, r2, #15
 80003e4:	4322      	orrs	r2, r4
 80003e6:	0252      	lsls	r2, r2, #9
 80003e8:	20ff      	movs	r0, #255	@ 0xff
 80003ea:	0a52      	lsrs	r2, r2, #9
 80003ec:	e7b2      	b.n	8000354 <__aeabi_fdiv+0x104>
 80003ee:	2201      	movs	r2, #1
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	2b1b      	cmp	r3, #27
 80003f4:	dcc3      	bgt.n	800037e <__aeabi_fdiv+0x12e>
 80003f6:	4642      	mov	r2, r8
 80003f8:	40da      	lsrs	r2, r3
 80003fa:	4643      	mov	r3, r8
 80003fc:	379e      	adds	r7, #158	@ 0x9e
 80003fe:	40bb      	lsls	r3, r7
 8000400:	1e59      	subs	r1, r3, #1
 8000402:	418b      	sbcs	r3, r1
 8000404:	431a      	orrs	r2, r3
 8000406:	0753      	lsls	r3, r2, #29
 8000408:	d004      	beq.n	8000414 <__aeabi_fdiv+0x1c4>
 800040a:	230f      	movs	r3, #15
 800040c:	4013      	ands	r3, r2
 800040e:	2b04      	cmp	r3, #4
 8000410:	d000      	beq.n	8000414 <__aeabi_fdiv+0x1c4>
 8000412:	3204      	adds	r2, #4
 8000414:	0153      	lsls	r3, r2, #5
 8000416:	d529      	bpl.n	800046c <__aeabi_fdiv+0x21c>
 8000418:	2001      	movs	r0, #1
 800041a:	2200      	movs	r2, #0
 800041c:	e79a      	b.n	8000354 <__aeabi_fdiv+0x104>
 800041e:	4642      	mov	r2, r8
 8000420:	0163      	lsls	r3, r4, #5
 8000422:	0155      	lsls	r5, r2, #5
 8000424:	42ab      	cmp	r3, r5
 8000426:	d215      	bcs.n	8000454 <__aeabi_fdiv+0x204>
 8000428:	201b      	movs	r0, #27
 800042a:	2200      	movs	r2, #0
 800042c:	3f01      	subs	r7, #1
 800042e:	2601      	movs	r6, #1
 8000430:	001c      	movs	r4, r3
 8000432:	0052      	lsls	r2, r2, #1
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	2c00      	cmp	r4, #0
 8000438:	db01      	blt.n	800043e <__aeabi_fdiv+0x1ee>
 800043a:	429d      	cmp	r5, r3
 800043c:	d801      	bhi.n	8000442 <__aeabi_fdiv+0x1f2>
 800043e:	1b5b      	subs	r3, r3, r5
 8000440:	4332      	orrs	r2, r6
 8000442:	3801      	subs	r0, #1
 8000444:	2800      	cmp	r0, #0
 8000446:	d1f3      	bne.n	8000430 <__aeabi_fdiv+0x1e0>
 8000448:	1e58      	subs	r0, r3, #1
 800044a:	4183      	sbcs	r3, r0
 800044c:	4313      	orrs	r3, r2
 800044e:	4698      	mov	r8, r3
 8000450:	000d      	movs	r5, r1
 8000452:	e79a      	b.n	800038a <__aeabi_fdiv+0x13a>
 8000454:	201a      	movs	r0, #26
 8000456:	2201      	movs	r2, #1
 8000458:	1b5b      	subs	r3, r3, r5
 800045a:	e7e8      	b.n	800042e <__aeabi_fdiv+0x1de>
 800045c:	3b02      	subs	r3, #2
 800045e:	425a      	negs	r2, r3
 8000460:	4153      	adcs	r3, r2
 8000462:	425b      	negs	r3, r3
 8000464:	0035      	movs	r5, r6
 8000466:	2200      	movs	r2, #0
 8000468:	b2d8      	uxtb	r0, r3
 800046a:	e773      	b.n	8000354 <__aeabi_fdiv+0x104>
 800046c:	0192      	lsls	r2, r2, #6
 800046e:	2000      	movs	r0, #0
 8000470:	0a52      	lsrs	r2, r2, #9
 8000472:	e76f      	b.n	8000354 <__aeabi_fdiv+0x104>
 8000474:	431a      	orrs	r2, r3
 8000476:	0252      	lsls	r2, r2, #9
 8000478:	0035      	movs	r5, r6
 800047a:	20ff      	movs	r0, #255	@ 0xff
 800047c:	0a52      	lsrs	r2, r2, #9
 800047e:	e769      	b.n	8000354 <__aeabi_fdiv+0x104>
 8000480:	4644      	mov	r4, r8
 8000482:	e7ad      	b.n	80003e0 <__aeabi_fdiv+0x190>
 8000484:	08002fa0 	.word	0x08002fa0
 8000488:	08002fe0 	.word	0x08002fe0
 800048c:	f7ffffff 	.word	0xf7ffffff

08000490 <__aeabi_fsub>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	4647      	mov	r7, r8
 8000494:	46ce      	mov	lr, r9
 8000496:	024e      	lsls	r6, r1, #9
 8000498:	0243      	lsls	r3, r0, #9
 800049a:	0045      	lsls	r5, r0, #1
 800049c:	0a72      	lsrs	r2, r6, #9
 800049e:	0fc4      	lsrs	r4, r0, #31
 80004a0:	0048      	lsls	r0, r1, #1
 80004a2:	b580      	push	{r7, lr}
 80004a4:	4694      	mov	ip, r2
 80004a6:	0a5f      	lsrs	r7, r3, #9
 80004a8:	0e2d      	lsrs	r5, r5, #24
 80004aa:	099b      	lsrs	r3, r3, #6
 80004ac:	0e00      	lsrs	r0, r0, #24
 80004ae:	0fc9      	lsrs	r1, r1, #31
 80004b0:	09b6      	lsrs	r6, r6, #6
 80004b2:	28ff      	cmp	r0, #255	@ 0xff
 80004b4:	d024      	beq.n	8000500 <__aeabi_fsub+0x70>
 80004b6:	2201      	movs	r2, #1
 80004b8:	4051      	eors	r1, r2
 80004ba:	1a2a      	subs	r2, r5, r0
 80004bc:	428c      	cmp	r4, r1
 80004be:	d00f      	beq.n	80004e0 <__aeabi_fsub+0x50>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	dc00      	bgt.n	80004c6 <__aeabi_fsub+0x36>
 80004c4:	e16a      	b.n	800079c <__aeabi_fsub+0x30c>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d135      	bne.n	8000536 <__aeabi_fsub+0xa6>
 80004ca:	2e00      	cmp	r6, #0
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fsub+0x40>
 80004ce:	e0a2      	b.n	8000616 <__aeabi_fsub+0x186>
 80004d0:	1e51      	subs	r1, r2, #1
 80004d2:	2a01      	cmp	r2, #1
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fsub+0x48>
 80004d6:	e124      	b.n	8000722 <__aeabi_fsub+0x292>
 80004d8:	2aff      	cmp	r2, #255	@ 0xff
 80004da:	d021      	beq.n	8000520 <__aeabi_fsub+0x90>
 80004dc:	000a      	movs	r2, r1
 80004de:	e02f      	b.n	8000540 <__aeabi_fsub+0xb0>
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	dc00      	bgt.n	80004e6 <__aeabi_fsub+0x56>
 80004e4:	e167      	b.n	80007b6 <__aeabi_fsub+0x326>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	d05e      	beq.n	80005a8 <__aeabi_fsub+0x118>
 80004ea:	2dff      	cmp	r5, #255	@ 0xff
 80004ec:	d018      	beq.n	8000520 <__aeabi_fsub+0x90>
 80004ee:	2180      	movs	r1, #128	@ 0x80
 80004f0:	04c9      	lsls	r1, r1, #19
 80004f2:	430e      	orrs	r6, r1
 80004f4:	2a1b      	cmp	r2, #27
 80004f6:	dc00      	bgt.n	80004fa <__aeabi_fsub+0x6a>
 80004f8:	e076      	b.n	80005e8 <__aeabi_fsub+0x158>
 80004fa:	002a      	movs	r2, r5
 80004fc:	3301      	adds	r3, #1
 80004fe:	e032      	b.n	8000566 <__aeabi_fsub+0xd6>
 8000500:	002a      	movs	r2, r5
 8000502:	3aff      	subs	r2, #255	@ 0xff
 8000504:	4691      	mov	r9, r2
 8000506:	2e00      	cmp	r6, #0
 8000508:	d042      	beq.n	8000590 <__aeabi_fsub+0x100>
 800050a:	428c      	cmp	r4, r1
 800050c:	d055      	beq.n	80005ba <__aeabi_fsub+0x12a>
 800050e:	464a      	mov	r2, r9
 8000510:	2a00      	cmp	r2, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_fsub+0x86>
 8000514:	e09c      	b.n	8000650 <__aeabi_fsub+0x1c0>
 8000516:	2d00      	cmp	r5, #0
 8000518:	d100      	bne.n	800051c <__aeabi_fsub+0x8c>
 800051a:	e077      	b.n	800060c <__aeabi_fsub+0x17c>
 800051c:	000c      	movs	r4, r1
 800051e:	0033      	movs	r3, r6
 8000520:	08db      	lsrs	r3, r3, #3
 8000522:	2b00      	cmp	r3, #0
 8000524:	d100      	bne.n	8000528 <__aeabi_fsub+0x98>
 8000526:	e06e      	b.n	8000606 <__aeabi_fsub+0x176>
 8000528:	2280      	movs	r2, #128	@ 0x80
 800052a:	03d2      	lsls	r2, r2, #15
 800052c:	4313      	orrs	r3, r2
 800052e:	025b      	lsls	r3, r3, #9
 8000530:	20ff      	movs	r0, #255	@ 0xff
 8000532:	0a5b      	lsrs	r3, r3, #9
 8000534:	e024      	b.n	8000580 <__aeabi_fsub+0xf0>
 8000536:	2dff      	cmp	r5, #255	@ 0xff
 8000538:	d0f2      	beq.n	8000520 <__aeabi_fsub+0x90>
 800053a:	2180      	movs	r1, #128	@ 0x80
 800053c:	04c9      	lsls	r1, r1, #19
 800053e:	430e      	orrs	r6, r1
 8000540:	2101      	movs	r1, #1
 8000542:	2a1b      	cmp	r2, #27
 8000544:	dc08      	bgt.n	8000558 <__aeabi_fsub+0xc8>
 8000546:	0031      	movs	r1, r6
 8000548:	2020      	movs	r0, #32
 800054a:	40d1      	lsrs	r1, r2
 800054c:	1a82      	subs	r2, r0, r2
 800054e:	4096      	lsls	r6, r2
 8000550:	0032      	movs	r2, r6
 8000552:	1e50      	subs	r0, r2, #1
 8000554:	4182      	sbcs	r2, r0
 8000556:	4311      	orrs	r1, r2
 8000558:	1a5b      	subs	r3, r3, r1
 800055a:	015a      	lsls	r2, r3, #5
 800055c:	d460      	bmi.n	8000620 <__aeabi_fsub+0x190>
 800055e:	2107      	movs	r1, #7
 8000560:	002a      	movs	r2, r5
 8000562:	4019      	ands	r1, r3
 8000564:	d057      	beq.n	8000616 <__aeabi_fsub+0x186>
 8000566:	210f      	movs	r1, #15
 8000568:	4019      	ands	r1, r3
 800056a:	2904      	cmp	r1, #4
 800056c:	d000      	beq.n	8000570 <__aeabi_fsub+0xe0>
 800056e:	3304      	adds	r3, #4
 8000570:	0159      	lsls	r1, r3, #5
 8000572:	d550      	bpl.n	8000616 <__aeabi_fsub+0x186>
 8000574:	1c50      	adds	r0, r2, #1
 8000576:	2afe      	cmp	r2, #254	@ 0xfe
 8000578:	d045      	beq.n	8000606 <__aeabi_fsub+0x176>
 800057a:	019b      	lsls	r3, r3, #6
 800057c:	b2c0      	uxtb	r0, r0
 800057e:	0a5b      	lsrs	r3, r3, #9
 8000580:	05c0      	lsls	r0, r0, #23
 8000582:	4318      	orrs	r0, r3
 8000584:	07e4      	lsls	r4, r4, #31
 8000586:	4320      	orrs	r0, r4
 8000588:	bcc0      	pop	{r6, r7}
 800058a:	46b9      	mov	r9, r7
 800058c:	46b0      	mov	r8, r6
 800058e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000590:	2201      	movs	r2, #1
 8000592:	4051      	eors	r1, r2
 8000594:	428c      	cmp	r4, r1
 8000596:	d1ba      	bne.n	800050e <__aeabi_fsub+0x7e>
 8000598:	464a      	mov	r2, r9
 800059a:	2a00      	cmp	r2, #0
 800059c:	d010      	beq.n	80005c0 <__aeabi_fsub+0x130>
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fsub+0x114>
 80005a2:	e098      	b.n	80006d6 <__aeabi_fsub+0x246>
 80005a4:	2300      	movs	r3, #0
 80005a6:	e7bb      	b.n	8000520 <__aeabi_fsub+0x90>
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d034      	beq.n	8000616 <__aeabi_fsub+0x186>
 80005ac:	1e51      	subs	r1, r2, #1
 80005ae:	2a01      	cmp	r2, #1
 80005b0:	d06e      	beq.n	8000690 <__aeabi_fsub+0x200>
 80005b2:	2aff      	cmp	r2, #255	@ 0xff
 80005b4:	d0b4      	beq.n	8000520 <__aeabi_fsub+0x90>
 80005b6:	000a      	movs	r2, r1
 80005b8:	e79c      	b.n	80004f4 <__aeabi_fsub+0x64>
 80005ba:	2a00      	cmp	r2, #0
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fsub+0x130>
 80005be:	e088      	b.n	80006d2 <__aeabi_fsub+0x242>
 80005c0:	20fe      	movs	r0, #254	@ 0xfe
 80005c2:	1c6a      	adds	r2, r5, #1
 80005c4:	4210      	tst	r0, r2
 80005c6:	d000      	beq.n	80005ca <__aeabi_fsub+0x13a>
 80005c8:	e092      	b.n	80006f0 <__aeabi_fsub+0x260>
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d000      	beq.n	80005d0 <__aeabi_fsub+0x140>
 80005ce:	e0a4      	b.n	800071a <__aeabi_fsub+0x28a>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fsub+0x146>
 80005d4:	e0cb      	b.n	800076e <__aeabi_fsub+0x2de>
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d000      	beq.n	80005dc <__aeabi_fsub+0x14c>
 80005da:	e0ca      	b.n	8000772 <__aeabi_fsub+0x2e2>
 80005dc:	2200      	movs	r2, #0
 80005de:	08db      	lsrs	r3, r3, #3
 80005e0:	025b      	lsls	r3, r3, #9
 80005e2:	0a5b      	lsrs	r3, r3, #9
 80005e4:	b2d0      	uxtb	r0, r2
 80005e6:	e7cb      	b.n	8000580 <__aeabi_fsub+0xf0>
 80005e8:	0031      	movs	r1, r6
 80005ea:	2020      	movs	r0, #32
 80005ec:	40d1      	lsrs	r1, r2
 80005ee:	1a82      	subs	r2, r0, r2
 80005f0:	4096      	lsls	r6, r2
 80005f2:	0032      	movs	r2, r6
 80005f4:	1e50      	subs	r0, r2, #1
 80005f6:	4182      	sbcs	r2, r0
 80005f8:	430a      	orrs	r2, r1
 80005fa:	189b      	adds	r3, r3, r2
 80005fc:	015a      	lsls	r2, r3, #5
 80005fe:	d5ae      	bpl.n	800055e <__aeabi_fsub+0xce>
 8000600:	1c6a      	adds	r2, r5, #1
 8000602:	2dfe      	cmp	r5, #254	@ 0xfe
 8000604:	d14a      	bne.n	800069c <__aeabi_fsub+0x20c>
 8000606:	20ff      	movs	r0, #255	@ 0xff
 8000608:	2300      	movs	r3, #0
 800060a:	e7b9      	b.n	8000580 <__aeabi_fsub+0xf0>
 800060c:	22ff      	movs	r2, #255	@ 0xff
 800060e:	2b00      	cmp	r3, #0
 8000610:	d14b      	bne.n	80006aa <__aeabi_fsub+0x21a>
 8000612:	000c      	movs	r4, r1
 8000614:	0033      	movs	r3, r6
 8000616:	08db      	lsrs	r3, r3, #3
 8000618:	2aff      	cmp	r2, #255	@ 0xff
 800061a:	d100      	bne.n	800061e <__aeabi_fsub+0x18e>
 800061c:	e781      	b.n	8000522 <__aeabi_fsub+0x92>
 800061e:	e7df      	b.n	80005e0 <__aeabi_fsub+0x150>
 8000620:	019f      	lsls	r7, r3, #6
 8000622:	09bf      	lsrs	r7, r7, #6
 8000624:	0038      	movs	r0, r7
 8000626:	f000 f931 	bl	800088c <__clzsi2>
 800062a:	3805      	subs	r0, #5
 800062c:	4087      	lsls	r7, r0
 800062e:	4285      	cmp	r5, r0
 8000630:	dc21      	bgt.n	8000676 <__aeabi_fsub+0x1e6>
 8000632:	003b      	movs	r3, r7
 8000634:	2120      	movs	r1, #32
 8000636:	1b42      	subs	r2, r0, r5
 8000638:	3201      	adds	r2, #1
 800063a:	40d3      	lsrs	r3, r2
 800063c:	1a8a      	subs	r2, r1, r2
 800063e:	4097      	lsls	r7, r2
 8000640:	1e7a      	subs	r2, r7, #1
 8000642:	4197      	sbcs	r7, r2
 8000644:	2200      	movs	r2, #0
 8000646:	433b      	orrs	r3, r7
 8000648:	0759      	lsls	r1, r3, #29
 800064a:	d000      	beq.n	800064e <__aeabi_fsub+0x1be>
 800064c:	e78b      	b.n	8000566 <__aeabi_fsub+0xd6>
 800064e:	e78f      	b.n	8000570 <__aeabi_fsub+0xe0>
 8000650:	20fe      	movs	r0, #254	@ 0xfe
 8000652:	1c6a      	adds	r2, r5, #1
 8000654:	4210      	tst	r0, r2
 8000656:	d112      	bne.n	800067e <__aeabi_fsub+0x1ee>
 8000658:	2d00      	cmp	r5, #0
 800065a:	d152      	bne.n	8000702 <__aeabi_fsub+0x272>
 800065c:	2b00      	cmp	r3, #0
 800065e:	d07c      	beq.n	800075a <__aeabi_fsub+0x2ca>
 8000660:	2e00      	cmp	r6, #0
 8000662:	d0bb      	beq.n	80005dc <__aeabi_fsub+0x14c>
 8000664:	1b9a      	subs	r2, r3, r6
 8000666:	0150      	lsls	r0, r2, #5
 8000668:	d400      	bmi.n	800066c <__aeabi_fsub+0x1dc>
 800066a:	e08b      	b.n	8000784 <__aeabi_fsub+0x2f4>
 800066c:	2401      	movs	r4, #1
 800066e:	2200      	movs	r2, #0
 8000670:	1af3      	subs	r3, r6, r3
 8000672:	400c      	ands	r4, r1
 8000674:	e7e8      	b.n	8000648 <__aeabi_fsub+0x1b8>
 8000676:	4b56      	ldr	r3, [pc, #344]	@ (80007d0 <__aeabi_fsub+0x340>)
 8000678:	1a2a      	subs	r2, r5, r0
 800067a:	403b      	ands	r3, r7
 800067c:	e7e4      	b.n	8000648 <__aeabi_fsub+0x1b8>
 800067e:	1b9f      	subs	r7, r3, r6
 8000680:	017a      	lsls	r2, r7, #5
 8000682:	d446      	bmi.n	8000712 <__aeabi_fsub+0x282>
 8000684:	2f00      	cmp	r7, #0
 8000686:	d1cd      	bne.n	8000624 <__aeabi_fsub+0x194>
 8000688:	2400      	movs	r4, #0
 800068a:	2000      	movs	r0, #0
 800068c:	2300      	movs	r3, #0
 800068e:	e777      	b.n	8000580 <__aeabi_fsub+0xf0>
 8000690:	199b      	adds	r3, r3, r6
 8000692:	2501      	movs	r5, #1
 8000694:	3201      	adds	r2, #1
 8000696:	0159      	lsls	r1, r3, #5
 8000698:	d400      	bmi.n	800069c <__aeabi_fsub+0x20c>
 800069a:	e760      	b.n	800055e <__aeabi_fsub+0xce>
 800069c:	2101      	movs	r1, #1
 800069e:	484d      	ldr	r0, [pc, #308]	@ (80007d4 <__aeabi_fsub+0x344>)
 80006a0:	4019      	ands	r1, r3
 80006a2:	085b      	lsrs	r3, r3, #1
 80006a4:	4003      	ands	r3, r0
 80006a6:	430b      	orrs	r3, r1
 80006a8:	e7ce      	b.n	8000648 <__aeabi_fsub+0x1b8>
 80006aa:	1e57      	subs	r7, r2, #1
 80006ac:	2a01      	cmp	r2, #1
 80006ae:	d05a      	beq.n	8000766 <__aeabi_fsub+0x2d6>
 80006b0:	000c      	movs	r4, r1
 80006b2:	2aff      	cmp	r2, #255	@ 0xff
 80006b4:	d033      	beq.n	800071e <__aeabi_fsub+0x28e>
 80006b6:	2201      	movs	r2, #1
 80006b8:	2f1b      	cmp	r7, #27
 80006ba:	dc07      	bgt.n	80006cc <__aeabi_fsub+0x23c>
 80006bc:	2120      	movs	r1, #32
 80006be:	1bc9      	subs	r1, r1, r7
 80006c0:	001a      	movs	r2, r3
 80006c2:	408b      	lsls	r3, r1
 80006c4:	40fa      	lsrs	r2, r7
 80006c6:	1e59      	subs	r1, r3, #1
 80006c8:	418b      	sbcs	r3, r1
 80006ca:	431a      	orrs	r2, r3
 80006cc:	0005      	movs	r5, r0
 80006ce:	1ab3      	subs	r3, r6, r2
 80006d0:	e743      	b.n	800055a <__aeabi_fsub+0xca>
 80006d2:	2d00      	cmp	r5, #0
 80006d4:	d123      	bne.n	800071e <__aeabi_fsub+0x28e>
 80006d6:	22ff      	movs	r2, #255	@ 0xff
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d09b      	beq.n	8000614 <__aeabi_fsub+0x184>
 80006dc:	1e51      	subs	r1, r2, #1
 80006de:	2a01      	cmp	r2, #1
 80006e0:	d0d6      	beq.n	8000690 <__aeabi_fsub+0x200>
 80006e2:	2aff      	cmp	r2, #255	@ 0xff
 80006e4:	d01b      	beq.n	800071e <__aeabi_fsub+0x28e>
 80006e6:	291b      	cmp	r1, #27
 80006e8:	dd2c      	ble.n	8000744 <__aeabi_fsub+0x2b4>
 80006ea:	0002      	movs	r2, r0
 80006ec:	1c73      	adds	r3, r6, #1
 80006ee:	e73a      	b.n	8000566 <__aeabi_fsub+0xd6>
 80006f0:	2aff      	cmp	r2, #255	@ 0xff
 80006f2:	d088      	beq.n	8000606 <__aeabi_fsub+0x176>
 80006f4:	199b      	adds	r3, r3, r6
 80006f6:	085b      	lsrs	r3, r3, #1
 80006f8:	0759      	lsls	r1, r3, #29
 80006fa:	d000      	beq.n	80006fe <__aeabi_fsub+0x26e>
 80006fc:	e733      	b.n	8000566 <__aeabi_fsub+0xd6>
 80006fe:	08db      	lsrs	r3, r3, #3
 8000700:	e76e      	b.n	80005e0 <__aeabi_fsub+0x150>
 8000702:	2b00      	cmp	r3, #0
 8000704:	d110      	bne.n	8000728 <__aeabi_fsub+0x298>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d043      	beq.n	8000792 <__aeabi_fsub+0x302>
 800070a:	2401      	movs	r4, #1
 800070c:	0033      	movs	r3, r6
 800070e:	400c      	ands	r4, r1
 8000710:	e706      	b.n	8000520 <__aeabi_fsub+0x90>
 8000712:	2401      	movs	r4, #1
 8000714:	1af7      	subs	r7, r6, r3
 8000716:	400c      	ands	r4, r1
 8000718:	e784      	b.n	8000624 <__aeabi_fsub+0x194>
 800071a:	2b00      	cmp	r3, #0
 800071c:	d104      	bne.n	8000728 <__aeabi_fsub+0x298>
 800071e:	0033      	movs	r3, r6
 8000720:	e6fe      	b.n	8000520 <__aeabi_fsub+0x90>
 8000722:	2501      	movs	r5, #1
 8000724:	1b9b      	subs	r3, r3, r6
 8000726:	e718      	b.n	800055a <__aeabi_fsub+0xca>
 8000728:	2e00      	cmp	r6, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fsub+0x29e>
 800072c:	e6f8      	b.n	8000520 <__aeabi_fsub+0x90>
 800072e:	2280      	movs	r2, #128	@ 0x80
 8000730:	03d2      	lsls	r2, r2, #15
 8000732:	4297      	cmp	r7, r2
 8000734:	d304      	bcc.n	8000740 <__aeabi_fsub+0x2b0>
 8000736:	4594      	cmp	ip, r2
 8000738:	d202      	bcs.n	8000740 <__aeabi_fsub+0x2b0>
 800073a:	2401      	movs	r4, #1
 800073c:	0033      	movs	r3, r6
 800073e:	400c      	ands	r4, r1
 8000740:	08db      	lsrs	r3, r3, #3
 8000742:	e6f1      	b.n	8000528 <__aeabi_fsub+0x98>
 8000744:	001a      	movs	r2, r3
 8000746:	2520      	movs	r5, #32
 8000748:	40ca      	lsrs	r2, r1
 800074a:	1a69      	subs	r1, r5, r1
 800074c:	408b      	lsls	r3, r1
 800074e:	1e59      	subs	r1, r3, #1
 8000750:	418b      	sbcs	r3, r1
 8000752:	4313      	orrs	r3, r2
 8000754:	0005      	movs	r5, r0
 8000756:	199b      	adds	r3, r3, r6
 8000758:	e750      	b.n	80005fc <__aeabi_fsub+0x16c>
 800075a:	2e00      	cmp	r6, #0
 800075c:	d094      	beq.n	8000688 <__aeabi_fsub+0x1f8>
 800075e:	2401      	movs	r4, #1
 8000760:	0033      	movs	r3, r6
 8000762:	400c      	ands	r4, r1
 8000764:	e73a      	b.n	80005dc <__aeabi_fsub+0x14c>
 8000766:	000c      	movs	r4, r1
 8000768:	2501      	movs	r5, #1
 800076a:	1af3      	subs	r3, r6, r3
 800076c:	e6f5      	b.n	800055a <__aeabi_fsub+0xca>
 800076e:	0033      	movs	r3, r6
 8000770:	e734      	b.n	80005dc <__aeabi_fsub+0x14c>
 8000772:	199b      	adds	r3, r3, r6
 8000774:	2200      	movs	r2, #0
 8000776:	0159      	lsls	r1, r3, #5
 8000778:	d5c1      	bpl.n	80006fe <__aeabi_fsub+0x26e>
 800077a:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <__aeabi_fsub+0x340>)
 800077c:	4013      	ands	r3, r2
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	2201      	movs	r2, #1
 8000782:	e72d      	b.n	80005e0 <__aeabi_fsub+0x150>
 8000784:	2a00      	cmp	r2, #0
 8000786:	d100      	bne.n	800078a <__aeabi_fsub+0x2fa>
 8000788:	e77e      	b.n	8000688 <__aeabi_fsub+0x1f8>
 800078a:	0013      	movs	r3, r2
 800078c:	2200      	movs	r2, #0
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	e726      	b.n	80005e0 <__aeabi_fsub+0x150>
 8000792:	2380      	movs	r3, #128	@ 0x80
 8000794:	2400      	movs	r4, #0
 8000796:	20ff      	movs	r0, #255	@ 0xff
 8000798:	03db      	lsls	r3, r3, #15
 800079a:	e6f1      	b.n	8000580 <__aeabi_fsub+0xf0>
 800079c:	2a00      	cmp	r2, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_fsub+0x312>
 80007a0:	e756      	b.n	8000650 <__aeabi_fsub+0x1c0>
 80007a2:	1b47      	subs	r7, r0, r5
 80007a4:	003a      	movs	r2, r7
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_fsub+0x31c>
 80007aa:	e730      	b.n	800060e <__aeabi_fsub+0x17e>
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	04d2      	lsls	r2, r2, #19
 80007b0:	000c      	movs	r4, r1
 80007b2:	4313      	orrs	r3, r2
 80007b4:	e77f      	b.n	80006b6 <__aeabi_fsub+0x226>
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fsub+0x32c>
 80007ba:	e701      	b.n	80005c0 <__aeabi_fsub+0x130>
 80007bc:	1b41      	subs	r1, r0, r5
 80007be:	2d00      	cmp	r5, #0
 80007c0:	d101      	bne.n	80007c6 <__aeabi_fsub+0x336>
 80007c2:	000a      	movs	r2, r1
 80007c4:	e788      	b.n	80006d8 <__aeabi_fsub+0x248>
 80007c6:	2280      	movs	r2, #128	@ 0x80
 80007c8:	04d2      	lsls	r2, r2, #19
 80007ca:	4313      	orrs	r3, r2
 80007cc:	e78b      	b.n	80006e6 <__aeabi_fsub+0x256>
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	fbffffff 	.word	0xfbffffff
 80007d4:	7dffffff 	.word	0x7dffffff

080007d8 <__aeabi_f2iz>:
 80007d8:	0241      	lsls	r1, r0, #9
 80007da:	0042      	lsls	r2, r0, #1
 80007dc:	0fc3      	lsrs	r3, r0, #31
 80007de:	0a49      	lsrs	r1, r1, #9
 80007e0:	2000      	movs	r0, #0
 80007e2:	0e12      	lsrs	r2, r2, #24
 80007e4:	2a7e      	cmp	r2, #126	@ 0x7e
 80007e6:	dd03      	ble.n	80007f0 <__aeabi_f2iz+0x18>
 80007e8:	2a9d      	cmp	r2, #157	@ 0x9d
 80007ea:	dd02      	ble.n	80007f2 <__aeabi_f2iz+0x1a>
 80007ec:	4a09      	ldr	r2, [pc, #36]	@ (8000814 <__aeabi_f2iz+0x3c>)
 80007ee:	1898      	adds	r0, r3, r2
 80007f0:	4770      	bx	lr
 80007f2:	2080      	movs	r0, #128	@ 0x80
 80007f4:	0400      	lsls	r0, r0, #16
 80007f6:	4301      	orrs	r1, r0
 80007f8:	2a95      	cmp	r2, #149	@ 0x95
 80007fa:	dc07      	bgt.n	800080c <__aeabi_f2iz+0x34>
 80007fc:	2096      	movs	r0, #150	@ 0x96
 80007fe:	1a82      	subs	r2, r0, r2
 8000800:	40d1      	lsrs	r1, r2
 8000802:	4248      	negs	r0, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1f3      	bne.n	80007f0 <__aeabi_f2iz+0x18>
 8000808:	0008      	movs	r0, r1
 800080a:	e7f1      	b.n	80007f0 <__aeabi_f2iz+0x18>
 800080c:	3a96      	subs	r2, #150	@ 0x96
 800080e:	4091      	lsls	r1, r2
 8000810:	e7f7      	b.n	8000802 <__aeabi_f2iz+0x2a>
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	7fffffff 	.word	0x7fffffff

08000818 <__aeabi_cfrcmple>:
 8000818:	4684      	mov	ip, r0
 800081a:	0008      	movs	r0, r1
 800081c:	4661      	mov	r1, ip
 800081e:	e7ff      	b.n	8000820 <__aeabi_cfcmpeq>

08000820 <__aeabi_cfcmpeq>:
 8000820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000822:	f000 f8c9 	bl	80009b8 <__lesf2>
 8000826:	2800      	cmp	r0, #0
 8000828:	d401      	bmi.n	800082e <__aeabi_cfcmpeq+0xe>
 800082a:	2100      	movs	r1, #0
 800082c:	42c8      	cmn	r0, r1
 800082e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000830 <__aeabi_fcmpeq>:
 8000830:	b510      	push	{r4, lr}
 8000832:	f000 f849 	bl	80008c8 <__eqsf2>
 8000836:	4240      	negs	r0, r0
 8000838:	3001      	adds	r0, #1
 800083a:	bd10      	pop	{r4, pc}

0800083c <__aeabi_fcmplt>:
 800083c:	b510      	push	{r4, lr}
 800083e:	f000 f8bb 	bl	80009b8 <__lesf2>
 8000842:	2800      	cmp	r0, #0
 8000844:	db01      	blt.n	800084a <__aeabi_fcmplt+0xe>
 8000846:	2000      	movs	r0, #0
 8000848:	bd10      	pop	{r4, pc}
 800084a:	2001      	movs	r0, #1
 800084c:	bd10      	pop	{r4, pc}
 800084e:	46c0      	nop			@ (mov r8, r8)

08000850 <__aeabi_fcmple>:
 8000850:	b510      	push	{r4, lr}
 8000852:	f000 f8b1 	bl	80009b8 <__lesf2>
 8000856:	2800      	cmp	r0, #0
 8000858:	dd01      	ble.n	800085e <__aeabi_fcmple+0xe>
 800085a:	2000      	movs	r0, #0
 800085c:	bd10      	pop	{r4, pc}
 800085e:	2001      	movs	r0, #1
 8000860:	bd10      	pop	{r4, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)

08000864 <__aeabi_fcmpgt>:
 8000864:	b510      	push	{r4, lr}
 8000866:	f000 f857 	bl	8000918 <__gesf2>
 800086a:	2800      	cmp	r0, #0
 800086c:	dc01      	bgt.n	8000872 <__aeabi_fcmpgt+0xe>
 800086e:	2000      	movs	r0, #0
 8000870:	bd10      	pop	{r4, pc}
 8000872:	2001      	movs	r0, #1
 8000874:	bd10      	pop	{r4, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)

08000878 <__aeabi_fcmpge>:
 8000878:	b510      	push	{r4, lr}
 800087a:	f000 f84d 	bl	8000918 <__gesf2>
 800087e:	2800      	cmp	r0, #0
 8000880:	da01      	bge.n	8000886 <__aeabi_fcmpge+0xe>
 8000882:	2000      	movs	r0, #0
 8000884:	bd10      	pop	{r4, pc}
 8000886:	2001      	movs	r0, #1
 8000888:	bd10      	pop	{r4, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)

0800088c <__clzsi2>:
 800088c:	211c      	movs	r1, #28
 800088e:	2301      	movs	r3, #1
 8000890:	041b      	lsls	r3, r3, #16
 8000892:	4298      	cmp	r0, r3
 8000894:	d301      	bcc.n	800089a <__clzsi2+0xe>
 8000896:	0c00      	lsrs	r0, r0, #16
 8000898:	3910      	subs	r1, #16
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	4298      	cmp	r0, r3
 800089e:	d301      	bcc.n	80008a4 <__clzsi2+0x18>
 80008a0:	0a00      	lsrs	r0, r0, #8
 80008a2:	3908      	subs	r1, #8
 80008a4:	091b      	lsrs	r3, r3, #4
 80008a6:	4298      	cmp	r0, r3
 80008a8:	d301      	bcc.n	80008ae <__clzsi2+0x22>
 80008aa:	0900      	lsrs	r0, r0, #4
 80008ac:	3904      	subs	r1, #4
 80008ae:	a202      	add	r2, pc, #8	@ (adr r2, 80008b8 <__clzsi2+0x2c>)
 80008b0:	5c10      	ldrb	r0, [r2, r0]
 80008b2:	1840      	adds	r0, r0, r1
 80008b4:	4770      	bx	lr
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	02020304 	.word	0x02020304
 80008bc:	01010101 	.word	0x01010101
	...

080008c8 <__eqsf2>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	0042      	lsls	r2, r0, #1
 80008cc:	024e      	lsls	r6, r1, #9
 80008ce:	004c      	lsls	r4, r1, #1
 80008d0:	0245      	lsls	r5, r0, #9
 80008d2:	0a6d      	lsrs	r5, r5, #9
 80008d4:	0e12      	lsrs	r2, r2, #24
 80008d6:	0fc3      	lsrs	r3, r0, #31
 80008d8:	0a76      	lsrs	r6, r6, #9
 80008da:	0e24      	lsrs	r4, r4, #24
 80008dc:	0fc9      	lsrs	r1, r1, #31
 80008de:	2aff      	cmp	r2, #255	@ 0xff
 80008e0:	d010      	beq.n	8000904 <__eqsf2+0x3c>
 80008e2:	2cff      	cmp	r4, #255	@ 0xff
 80008e4:	d00c      	beq.n	8000900 <__eqsf2+0x38>
 80008e6:	2001      	movs	r0, #1
 80008e8:	42a2      	cmp	r2, r4
 80008ea:	d10a      	bne.n	8000902 <__eqsf2+0x3a>
 80008ec:	42b5      	cmp	r5, r6
 80008ee:	d108      	bne.n	8000902 <__eqsf2+0x3a>
 80008f0:	428b      	cmp	r3, r1
 80008f2:	d00f      	beq.n	8000914 <__eqsf2+0x4c>
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	d104      	bne.n	8000902 <__eqsf2+0x3a>
 80008f8:	0028      	movs	r0, r5
 80008fa:	1e43      	subs	r3, r0, #1
 80008fc:	4198      	sbcs	r0, r3
 80008fe:	e000      	b.n	8000902 <__eqsf2+0x3a>
 8000900:	2001      	movs	r0, #1
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	2001      	movs	r0, #1
 8000906:	2cff      	cmp	r4, #255	@ 0xff
 8000908:	d1fb      	bne.n	8000902 <__eqsf2+0x3a>
 800090a:	4335      	orrs	r5, r6
 800090c:	d1f9      	bne.n	8000902 <__eqsf2+0x3a>
 800090e:	404b      	eors	r3, r1
 8000910:	0018      	movs	r0, r3
 8000912:	e7f6      	b.n	8000902 <__eqsf2+0x3a>
 8000914:	2000      	movs	r0, #0
 8000916:	e7f4      	b.n	8000902 <__eqsf2+0x3a>

08000918 <__gesf2>:
 8000918:	b530      	push	{r4, r5, lr}
 800091a:	0042      	lsls	r2, r0, #1
 800091c:	0244      	lsls	r4, r0, #9
 800091e:	024d      	lsls	r5, r1, #9
 8000920:	0fc3      	lsrs	r3, r0, #31
 8000922:	0048      	lsls	r0, r1, #1
 8000924:	0a64      	lsrs	r4, r4, #9
 8000926:	0e12      	lsrs	r2, r2, #24
 8000928:	0a6d      	lsrs	r5, r5, #9
 800092a:	0e00      	lsrs	r0, r0, #24
 800092c:	0fc9      	lsrs	r1, r1, #31
 800092e:	2aff      	cmp	r2, #255	@ 0xff
 8000930:	d019      	beq.n	8000966 <__gesf2+0x4e>
 8000932:	28ff      	cmp	r0, #255	@ 0xff
 8000934:	d00b      	beq.n	800094e <__gesf2+0x36>
 8000936:	2a00      	cmp	r2, #0
 8000938:	d11e      	bne.n	8000978 <__gesf2+0x60>
 800093a:	2800      	cmp	r0, #0
 800093c:	d10b      	bne.n	8000956 <__gesf2+0x3e>
 800093e:	2d00      	cmp	r5, #0
 8000940:	d027      	beq.n	8000992 <__gesf2+0x7a>
 8000942:	2c00      	cmp	r4, #0
 8000944:	d134      	bne.n	80009b0 <__gesf2+0x98>
 8000946:	2900      	cmp	r1, #0
 8000948:	d02f      	beq.n	80009aa <__gesf2+0x92>
 800094a:	0008      	movs	r0, r1
 800094c:	bd30      	pop	{r4, r5, pc}
 800094e:	2d00      	cmp	r5, #0
 8000950:	d128      	bne.n	80009a4 <__gesf2+0x8c>
 8000952:	2a00      	cmp	r2, #0
 8000954:	d101      	bne.n	800095a <__gesf2+0x42>
 8000956:	2c00      	cmp	r4, #0
 8000958:	d0f5      	beq.n	8000946 <__gesf2+0x2e>
 800095a:	428b      	cmp	r3, r1
 800095c:	d107      	bne.n	800096e <__gesf2+0x56>
 800095e:	2b00      	cmp	r3, #0
 8000960:	d023      	beq.n	80009aa <__gesf2+0x92>
 8000962:	0018      	movs	r0, r3
 8000964:	e7f2      	b.n	800094c <__gesf2+0x34>
 8000966:	2c00      	cmp	r4, #0
 8000968:	d11c      	bne.n	80009a4 <__gesf2+0x8c>
 800096a:	28ff      	cmp	r0, #255	@ 0xff
 800096c:	d014      	beq.n	8000998 <__gesf2+0x80>
 800096e:	1e58      	subs	r0, r3, #1
 8000970:	2302      	movs	r3, #2
 8000972:	4018      	ands	r0, r3
 8000974:	3801      	subs	r0, #1
 8000976:	e7e9      	b.n	800094c <__gesf2+0x34>
 8000978:	2800      	cmp	r0, #0
 800097a:	d0f8      	beq.n	800096e <__gesf2+0x56>
 800097c:	428b      	cmp	r3, r1
 800097e:	d1f6      	bne.n	800096e <__gesf2+0x56>
 8000980:	4282      	cmp	r2, r0
 8000982:	dcf4      	bgt.n	800096e <__gesf2+0x56>
 8000984:	dbeb      	blt.n	800095e <__gesf2+0x46>
 8000986:	42ac      	cmp	r4, r5
 8000988:	d8f1      	bhi.n	800096e <__gesf2+0x56>
 800098a:	2000      	movs	r0, #0
 800098c:	42ac      	cmp	r4, r5
 800098e:	d2dd      	bcs.n	800094c <__gesf2+0x34>
 8000990:	e7e5      	b.n	800095e <__gesf2+0x46>
 8000992:	2c00      	cmp	r4, #0
 8000994:	d0da      	beq.n	800094c <__gesf2+0x34>
 8000996:	e7ea      	b.n	800096e <__gesf2+0x56>
 8000998:	2d00      	cmp	r5, #0
 800099a:	d103      	bne.n	80009a4 <__gesf2+0x8c>
 800099c:	428b      	cmp	r3, r1
 800099e:	d1e6      	bne.n	800096e <__gesf2+0x56>
 80009a0:	2000      	movs	r0, #0
 80009a2:	e7d3      	b.n	800094c <__gesf2+0x34>
 80009a4:	2002      	movs	r0, #2
 80009a6:	4240      	negs	r0, r0
 80009a8:	e7d0      	b.n	800094c <__gesf2+0x34>
 80009aa:	2001      	movs	r0, #1
 80009ac:	4240      	negs	r0, r0
 80009ae:	e7cd      	b.n	800094c <__gesf2+0x34>
 80009b0:	428b      	cmp	r3, r1
 80009b2:	d0e8      	beq.n	8000986 <__gesf2+0x6e>
 80009b4:	e7db      	b.n	800096e <__gesf2+0x56>
 80009b6:	46c0      	nop			@ (mov r8, r8)

080009b8 <__lesf2>:
 80009b8:	b530      	push	{r4, r5, lr}
 80009ba:	0042      	lsls	r2, r0, #1
 80009bc:	0244      	lsls	r4, r0, #9
 80009be:	024d      	lsls	r5, r1, #9
 80009c0:	0fc3      	lsrs	r3, r0, #31
 80009c2:	0048      	lsls	r0, r1, #1
 80009c4:	0a64      	lsrs	r4, r4, #9
 80009c6:	0e12      	lsrs	r2, r2, #24
 80009c8:	0a6d      	lsrs	r5, r5, #9
 80009ca:	0e00      	lsrs	r0, r0, #24
 80009cc:	0fc9      	lsrs	r1, r1, #31
 80009ce:	2aff      	cmp	r2, #255	@ 0xff
 80009d0:	d01a      	beq.n	8000a08 <__lesf2+0x50>
 80009d2:	28ff      	cmp	r0, #255	@ 0xff
 80009d4:	d00e      	beq.n	80009f4 <__lesf2+0x3c>
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	d11e      	bne.n	8000a18 <__lesf2+0x60>
 80009da:	2800      	cmp	r0, #0
 80009dc:	d10e      	bne.n	80009fc <__lesf2+0x44>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d02a      	beq.n	8000a38 <__lesf2+0x80>
 80009e2:	2c00      	cmp	r4, #0
 80009e4:	d00c      	beq.n	8000a00 <__lesf2+0x48>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d01d      	beq.n	8000a26 <__lesf2+0x6e>
 80009ea:	1e58      	subs	r0, r3, #1
 80009ec:	2302      	movs	r3, #2
 80009ee:	4018      	ands	r0, r3
 80009f0:	3801      	subs	r0, #1
 80009f2:	e010      	b.n	8000a16 <__lesf2+0x5e>
 80009f4:	2d00      	cmp	r5, #0
 80009f6:	d10d      	bne.n	8000a14 <__lesf2+0x5c>
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	d120      	bne.n	8000a3e <__lesf2+0x86>
 80009fc:	2c00      	cmp	r4, #0
 80009fe:	d11e      	bne.n	8000a3e <__lesf2+0x86>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d023      	beq.n	8000a4c <__lesf2+0x94>
 8000a04:	0008      	movs	r0, r1
 8000a06:	e006      	b.n	8000a16 <__lesf2+0x5e>
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d103      	bne.n	8000a14 <__lesf2+0x5c>
 8000a0c:	28ff      	cmp	r0, #255	@ 0xff
 8000a0e:	d1ec      	bne.n	80009ea <__lesf2+0x32>
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d017      	beq.n	8000a44 <__lesf2+0x8c>
 8000a14:	2002      	movs	r0, #2
 8000a16:	bd30      	pop	{r4, r5, pc}
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d0e6      	beq.n	80009ea <__lesf2+0x32>
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d1e4      	bne.n	80009ea <__lesf2+0x32>
 8000a20:	4282      	cmp	r2, r0
 8000a22:	dce2      	bgt.n	80009ea <__lesf2+0x32>
 8000a24:	db04      	blt.n	8000a30 <__lesf2+0x78>
 8000a26:	42ac      	cmp	r4, r5
 8000a28:	d8df      	bhi.n	80009ea <__lesf2+0x32>
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	42ac      	cmp	r4, r5
 8000a2e:	d2f2      	bcs.n	8000a16 <__lesf2+0x5e>
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00b      	beq.n	8000a4c <__lesf2+0x94>
 8000a34:	0018      	movs	r0, r3
 8000a36:	e7ee      	b.n	8000a16 <__lesf2+0x5e>
 8000a38:	2c00      	cmp	r4, #0
 8000a3a:	d0ec      	beq.n	8000a16 <__lesf2+0x5e>
 8000a3c:	e7d5      	b.n	80009ea <__lesf2+0x32>
 8000a3e:	428b      	cmp	r3, r1
 8000a40:	d1d3      	bne.n	80009ea <__lesf2+0x32>
 8000a42:	e7f5      	b.n	8000a30 <__lesf2+0x78>
 8000a44:	2000      	movs	r0, #0
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d0e5      	beq.n	8000a16 <__lesf2+0x5e>
 8000a4a:	e7ce      	b.n	80009ea <__lesf2+0x32>
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	4240      	negs	r0, r0
 8000a50:	e7e1      	b.n	8000a16 <__lesf2+0x5e>
 8000a52:	46c0      	nop			@ (mov r8, r8)

08000a54 <motorDelay>:
#define IN4_PIN GPIO_PIN_3
#define IN4_PORT GPIOA
int stepNumber;          // which step the motor is on

void motorDelay(uint32_t delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
    if (delay < 6000)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a98 <motorDelay+0x44>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d80b      	bhi.n	8000a7c <motorDelay+0x28>
    {
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000a64:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <motorDelay+0x48>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	625a      	str	r2, [r3, #36]	@ 0x24
        while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <motorDelay+0x48>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d8f9      	bhi.n	8000a6e <motorDelay+0x1a>
    }
    else
    {
        HAL_Delay(delay/1000);
    }
}
 8000a7a:	e009      	b.n	8000a90 <motorDelay+0x3c>
        HAL_Delay(delay/1000);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	22fa      	movs	r2, #250	@ 0xfa
 8000a80:	0091      	lsls	r1, r2, #2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff fb40 	bl	8000108 <__udivsi3>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fcd2 	bl	8001434 <HAL_Delay>
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	0000176f 	.word	0x0000176f
 8000a9c:	20000068 	.word	0x20000068

08000aa0 <motorOn>:

void motorOn()
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    // Find out which step the motor is on
    switch (stepNumber)
 8000aa4:	4b49      	ldr	r3, [pc, #292]	@ (8000bcc <motorOn+0x12c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d06a      	beq.n	8000b82 <motorOn+0xe2>
 8000aac:	dd00      	ble.n	8000ab0 <motorOn+0x10>
 8000aae:	e088      	b.n	8000bc2 <motorOn+0x122>
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d046      	beq.n	8000b42 <motorOn+0xa2>
 8000ab4:	dd00      	ble.n	8000ab8 <motorOn+0x18>
 8000ab6:	e084      	b.n	8000bc2 <motorOn+0x122>
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d002      	beq.n	8000ac2 <motorOn+0x22>
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d020      	beq.n	8000b02 <motorOn+0x62>
          HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
          HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
          HAL_Delay(5);
        break;
      default:
        break;
 8000ac0:	e07f      	b.n	8000bc2 <motorOn+0x122>
          HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000ac2:	2390      	movs	r3, #144	@ 0x90
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2101      	movs	r1, #1
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 fae1 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000ad0:	2390      	movs	r3, #144	@ 0x90
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f001 fada 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000ade:	2390      	movs	r3, #144	@ 0x90
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 fad3 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000aec:	2390      	movs	r3, #144	@ 0x90
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	2201      	movs	r2, #1
 8000af2:	2108      	movs	r1, #8
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 facc 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_Delay(5);
 8000afa:	2005      	movs	r0, #5
 8000afc:	f000 fc9a 	bl	8001434 <HAL_Delay>
        break;
 8000b00:	e060      	b.n	8000bc4 <motorOn+0x124>
          HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000b02:	2390      	movs	r3, #144	@ 0x90
 8000b04:	05db      	lsls	r3, r3, #23
 8000b06:	2201      	movs	r2, #1
 8000b08:	2101      	movs	r1, #1
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f001 fac1 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000b10:	2390      	movs	r3, #144	@ 0x90
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	2200      	movs	r2, #0
 8000b16:	2102      	movs	r1, #2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 faba 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 8000b1e:	2390      	movs	r3, #144	@ 0x90
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	2201      	movs	r2, #1
 8000b24:	2104      	movs	r1, #4
 8000b26:	0018      	movs	r0, r3
 8000b28:	f001 fab3 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000b2c:	2390      	movs	r3, #144	@ 0x90
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	2200      	movs	r2, #0
 8000b32:	2108      	movs	r1, #8
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 faac 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_Delay(5);
 8000b3a:	2005      	movs	r0, #5
 8000b3c:	f000 fc7a 	bl	8001434 <HAL_Delay>
        break;
 8000b40:	e040      	b.n	8000bc4 <motorOn+0x124>
          HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000b42:	2390      	movs	r3, #144	@ 0x90
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	2200      	movs	r2, #0
 8000b48:	2101      	movs	r1, #1
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f001 faa1 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000b50:	2390      	movs	r3, #144	@ 0x90
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	2201      	movs	r2, #1
 8000b56:	2102      	movs	r1, #2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f001 fa9a 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 8000b5e:	2390      	movs	r3, #144	@ 0x90
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	2201      	movs	r2, #1
 8000b64:	2104      	movs	r1, #4
 8000b66:	0018      	movs	r0, r3
 8000b68:	f001 fa93 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000b6c:	2390      	movs	r3, #144	@ 0x90
 8000b6e:	05db      	lsls	r3, r3, #23
 8000b70:	2200      	movs	r2, #0
 8000b72:	2108      	movs	r1, #8
 8000b74:	0018      	movs	r0, r3
 8000b76:	f001 fa8c 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_Delay(5);
 8000b7a:	2005      	movs	r0, #5
 8000b7c:	f000 fc5a 	bl	8001434 <HAL_Delay>
        break;
 8000b80:	e020      	b.n	8000bc4 <motorOn+0x124>
          HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000b82:	2390      	movs	r3, #144	@ 0x90
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	2200      	movs	r2, #0
 8000b88:	2101      	movs	r1, #1
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f001 fa81 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000b90:	2390      	movs	r3, #144	@ 0x90
 8000b92:	05db      	lsls	r3, r3, #23
 8000b94:	2201      	movs	r2, #1
 8000b96:	2102      	movs	r1, #2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 fa7a 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000b9e:	2390      	movs	r3, #144	@ 0x90
 8000ba0:	05db      	lsls	r3, r3, #23
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f001 fa73 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000bac:	2390      	movs	r3, #144	@ 0x90
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 fa6c 	bl	8002092 <HAL_GPIO_WritePin>
          HAL_Delay(5);
 8000bba:	2005      	movs	r0, #5
 8000bbc:	f000 fc3a 	bl	8001434 <HAL_Delay>
        break;
 8000bc0:	e000      	b.n	8000bc4 <motorOn+0x124>
        break;
 8000bc2:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	200000b4 	.word	0x200000b4

08000bd0 <motorOff>:
void motorOff()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    // Switch off the idle current to the motor
    // Otherwise L298N module will heat up
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000bd4:	2390      	movs	r3, #144	@ 0x90
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2101      	movs	r1, #1
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 fa58 	bl	8002092 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000be2:	2390      	movs	r3, #144	@ 0x90
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	2200      	movs	r2, #0
 8000be8:	2102      	movs	r1, #2
 8000bea:	0018      	movs	r0, r3
 8000bec:	f001 fa51 	bl	8002092 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000bf0:	2390      	movs	r3, #144	@ 0x90
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f001 fa4a 	bl	8002092 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000bfe:	2390      	movs	r3, #144	@ 0x90
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	2200      	movs	r2, #0
 8000c04:	2108      	movs	r1, #8
 8000c06:	0018      	movs	r0, r3
 8000c08:	f001 fa43 	bl	8002092 <HAL_GPIO_WritePin>
}
 8000c0c:	46c0      	nop			@ (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <stepCV>:
void stepCV (int steps, float speed) // CV - Clockwise
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t delay = 60*1000*1000/200/speed;
 8000c1e:	6839      	ldr	r1, [r7, #0]
 8000c20:	485c      	ldr	r0, [pc, #368]	@ (8000d94 <stepCV+0x180>)
 8000c22:	f7ff fb15 	bl	8000250 <__aeabi_fdiv>
 8000c26:	1c03      	adds	r3, r0, #0
 8000c28:	1c18      	adds	r0, r3, #0
 8000c2a:	f7ff faf9 	bl	8000220 <__aeabi_f2uiz>
 8000c2e:	0003      	movs	r3, r0
 8000c30:	60bb      	str	r3, [r7, #8]
  for(int x=0; x<steps; x=x+1)
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	e0a3      	b.n	8000d80 <stepCV+0x16c>
  {
    // Step to the next step
    switch (stepNumber)
 8000c38:	4b57      	ldr	r3, [pc, #348]	@ (8000d98 <stepCV+0x184>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d100      	bne.n	8000c42 <stepCV+0x2e>
 8000c40:	e076      	b.n	8000d30 <stepCV+0x11c>
 8000c42:	dd00      	ble.n	8000c46 <stepCV+0x32>
 8000c44:	e098      	b.n	8000d78 <stepCV+0x164>
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d04e      	beq.n	8000ce8 <stepCV+0xd4>
 8000c4a:	dd00      	ble.n	8000c4e <stepCV+0x3a>
 8000c4c:	e094      	b.n	8000d78 <stepCV+0x164>
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d002      	beq.n	8000c58 <stepCV+0x44>
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d024      	beq.n	8000ca0 <stepCV+0x8c>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
        motorDelay(delay);
        stepNumber = 1;
        break;
      default:
        break;
 8000c56:	e08f      	b.n	8000d78 <stepCV+0x164>
        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000c58:	2390      	movs	r3, #144	@ 0x90
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2101      	movs	r1, #1
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 fa16 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000c66:	2390      	movs	r3, #144	@ 0x90
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f001 fa0f 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 8000c74:	2390      	movs	r3, #144	@ 0x90
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 fa08 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000c82:	2390      	movs	r3, #144	@ 0x90
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	2200      	movs	r2, #0
 8000c88:	2108      	movs	r1, #8
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f001 fa01 	bl	8002092 <HAL_GPIO_WritePin>
        motorDelay(delay);
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fede 	bl	8000a54 <motorDelay>
        stepNumber = 2;
 8000c98:	4b3f      	ldr	r3, [pc, #252]	@ (8000d98 <stepCV+0x184>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	601a      	str	r2, [r3, #0]
        break;
 8000c9e:	e06c      	b.n	8000d7a <stepCV+0x166>
        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000ca0:	2390      	movs	r3, #144	@ 0x90
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 f9f2 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000cae:	2390      	movs	r3, #144	@ 0x90
 8000cb0:	05db      	lsls	r3, r3, #23
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f001 f9eb 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 8000cbc:	2390      	movs	r3, #144	@ 0x90
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 f9e4 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000cca:	2390      	movs	r3, #144	@ 0x90
 8000ccc:	05db      	lsls	r3, r3, #23
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f001 f9dd 	bl	8002092 <HAL_GPIO_WritePin>
        motorDelay(delay);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff feba 	bl	8000a54 <motorDelay>
        stepNumber = 3;
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d98 <stepCV+0x184>)
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	601a      	str	r2, [r3, #0]
        break;
 8000ce6:	e048      	b.n	8000d7a <stepCV+0x166>
        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000ce8:	2390      	movs	r3, #144	@ 0x90
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	2200      	movs	r2, #0
 8000cee:	2101      	movs	r1, #1
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f001 f9ce 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000cf6:	2390      	movs	r3, #144	@ 0x90
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f001 f9c7 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000d04:	2390      	movs	r3, #144	@ 0x90
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f001 f9c0 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);
 8000d12:	2390      	movs	r3, #144	@ 0x90
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	2201      	movs	r2, #1
 8000d18:	2108      	movs	r1, #8
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 f9b9 	bl	8002092 <HAL_GPIO_WritePin>
        motorDelay(delay);
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fe96 	bl	8000a54 <motorDelay>
        stepNumber = 4;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <stepCV+0x184>)
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	601a      	str	r2, [r3, #0]
        break;
 8000d2e:	e024      	b.n	8000d7a <stepCV+0x166>
        HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000d30:	2390      	movs	r3, #144	@ 0x90
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	2201      	movs	r2, #1
 8000d36:	2101      	movs	r1, #1
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 f9aa 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000d3e:	2390      	movs	r3, #144	@ 0x90
 8000d40:	05db      	lsls	r3, r3, #23
 8000d42:	2200      	movs	r2, #0
 8000d44:	2102      	movs	r1, #2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 f9a3 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000d4c:	2390      	movs	r3, #144	@ 0x90
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	2200      	movs	r2, #0
 8000d52:	2104      	movs	r1, #4
 8000d54:	0018      	movs	r0, r3
 8000d56:	f001 f99c 	bl	8002092 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000d5a:	2390      	movs	r3, #144	@ 0x90
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2108      	movs	r1, #8
 8000d62:	0018      	movs	r0, r3
 8000d64:	f001 f995 	bl	8002092 <HAL_GPIO_WritePin>
        motorDelay(delay);
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fe72 	bl	8000a54 <motorDelay>
        stepNumber = 1;
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <stepCV+0x184>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
        break;
 8000d76:	e000      	b.n	8000d7a <stepCV+0x166>
        break;
 8000d78:	46c0      	nop			@ (mov r8, r8)
  for(int x=0; x<steps; x=x+1)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	da00      	bge.n	8000d8a <stepCV+0x176>
 8000d88:	e756      	b.n	8000c38 <stepCV+0x24>
    }
  }
}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	46c0      	nop			@ (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b004      	add	sp, #16
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	48927c00 	.word	0x48927c00
 8000d98:	200000b4 	.word	0x200000b4

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da0:	f000 fae4 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da4:	f000 f860 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da8:	f000 f95e 	bl	8001068 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dac:	f000 f908 	bl	8000fc0 <MX_TIM2_Init>
  MX_ADC_Init();
 8000db0:	f000 f8aa 	bl	8000f08 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000db4:	4b26      	ldr	r3, [pc, #152]	@ (8000e50 <main+0xb4>)
 8000db6:	0018      	movs	r0, r3
 8000db8:	f001 fe16 	bl	80029e8 <HAL_TIM_Base_Start>
  stepNumber = 1;
 8000dbc:	4b25      	ldr	r3, [pc, #148]	@ (8000e54 <main+0xb8>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start(&hadc);
 8000dc2:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <main+0xbc>)
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 fc99 	bl	80016fc <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 8000dca:	2390      	movs	r3, #144	@ 0x90
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	2110      	movs	r1, #16
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f001 f941 	bl	8002058 <HAL_GPIO_ReadPin>
 8000dd6:	1e03      	subs	r3, r0, #0
 8000dd8:	d10f      	bne.n	8000dfa <main+0x5e>
	  	 motorOn();
 8000dda:	f7ff fe61 	bl	8000aa0 <motorOn>
	    stepCV(1000,150.0f); // Clockwise 200 steps 150 RPM
 8000dde:	4a1f      	ldr	r2, [pc, #124]	@ (8000e5c <main+0xc0>)
 8000de0:	23fa      	movs	r3, #250	@ 0xfa
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	1c11      	adds	r1, r2, #0
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff ff14 	bl	8000c14 <stepCV>
	    motorOff();
 8000dec:	f7ff fef0 	bl	8000bd0 <motorOff>
	    HAL_Delay(2000);
 8000df0:	23fa      	movs	r3, #250	@ 0xfa
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	0018      	movs	r0, r3
 8000df6:	f000 fb1d 	bl	8001434 <HAL_Delay>
	    // motorOn();
	    	    // stepCCV(1000,150.0f); // Clockwise 200 steps 150 RPM
	    	    // motorOff();
	    	    // HAL_Delay(2000);
	}
	HAL_ADC_PollForConversion(&hadc, 1000);
 8000dfa:	23fa      	movs	r3, #250	@ 0xfa
 8000dfc:	009a      	lsls	r2, r3, #2
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <main+0xbc>)
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 fcce 	bl	80017a4 <HAL_ADC_PollForConversion>
	readValue=HAL_ADC_GetValue(&hadc);
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <main+0xbc>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 fd62 	bl	80018d4 <HAL_ADC_GetValue>
 8000e10:	0003      	movs	r3, r0
 8000e12:	001a      	movs	r2, r3
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <main+0xc4>)
 8000e16:	601a      	str	r2, [r3, #0]
	if(readValue<1000){
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <main+0xc4>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	23fa      	movs	r3, #250	@ 0xfa
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	429a      	cmp	r2, r3
 8000e22:	da07      	bge.n	8000e34 <main+0x98>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e24:	2380      	movs	r3, #128	@ 0x80
 8000e26:	019b      	lsls	r3, r3, #6
 8000e28:	480e      	ldr	r0, [pc, #56]	@ (8000e64 <main+0xc8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	f001 f930 	bl	8002092 <HAL_GPIO_WritePin>
 8000e32:	e7ca      	b.n	8000dca <main+0x2e>
	}else if(readValue>1000){
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <main+0xc4>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	23fa      	movs	r3, #250	@ 0xfa
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	ddc4      	ble.n	8000dca <main+0x2e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	019b      	lsls	r3, r3, #6
 8000e44:	4807      	ldr	r0, [pc, #28]	@ (8000e64 <main+0xc8>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	0019      	movs	r1, r3
 8000e4a:	f001 f922 	bl	8002092 <HAL_GPIO_WritePin>
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 8000e4e:	e7bc      	b.n	8000dca <main+0x2e>
 8000e50:	20000068 	.word	0x20000068
 8000e54:	200000b4 	.word	0x200000b4
 8000e58:	20000028 	.word	0x20000028
 8000e5c:	43160000 	.word	0x43160000
 8000e60:	200000b0 	.word	0x200000b0
 8000e64:	48000400 	.word	0x48000400

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b091      	sub	sp, #68	@ 0x44
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	2410      	movs	r4, #16
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	0018      	movs	r0, r3
 8000e74:	2330      	movs	r3, #48	@ 0x30
 8000e76:	001a      	movs	r2, r3
 8000e78:	2100      	movs	r1, #0
 8000e7a:	f002 f859 	bl	8002f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7e:	003b      	movs	r3, r7
 8000e80:	0018      	movs	r0, r3
 8000e82:	2310      	movs	r3, #16
 8000e84:	001a      	movs	r2, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	f002 f852 	bl	8002f30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000e8c:	0021      	movs	r1, r4
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2212      	movs	r2, #18
 8000e92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2201      	movs	r2, #1
 8000e98:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2210      	movs	r2, #16
 8000ea4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2202      	movs	r2, #2
 8000eb0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	22a0      	movs	r2, #160	@ 0xa0
 8000ebc:	0392      	lsls	r2, r2, #14
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f001 f8ff 	bl	80020cc <HAL_RCC_OscConfig>
 8000ece:	1e03      	subs	r3, r0, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 f977 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2202      	movs	r2, #2
 8000ee0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f001 fc04 	bl	8002700 <HAL_RCC_ClockConfig>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000efc:	f000 f962 	bl	80011c4 <Error_Handler>
  }
}
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b011      	add	sp, #68	@ 0x44
 8000f06:	bd90      	pop	{r4, r7, pc}

08000f08 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	0018      	movs	r0, r3
 8000f12:	230c      	movs	r3, #12
 8000f14:	001a      	movs	r2, r3
 8000f16:	2100      	movs	r1, #0
 8000f18:	f002 f80a 	bl	8002f30 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000f1c:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f1e:	4a27      	ldr	r2, [pc, #156]	@ (8000fbc <MX_ADC_Init+0xb4>)
 8000f20:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f22:	4b25      	ldr	r3, [pc, #148]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f28:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2e:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000f34:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f5a:	22c2      	movs	r2, #194	@ 0xc2
 8000f5c:	32ff      	adds	r2, #255	@ 0xff
 8000f5e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f68:	2224      	movs	r2, #36	@ 0x24
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f74:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 fa80 	bl	800147c <HAL_ADC_Init>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000f80:	f000 f920 	bl	80011c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2205      	movs	r2, #5
 8000f88:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2280      	movs	r2, #128	@ 0x80
 8000f8e:	0152      	lsls	r2, r2, #5
 8000f90:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	0552      	lsls	r2, r2, #21
 8000f98:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f9a:	1d3a      	adds	r2, r7, #4
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_ADC_Init+0xb0>)
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f000 fca3 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000faa:	f000 f90b 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b004      	add	sp, #16
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	20000028 	.word	0x20000028
 8000fbc:	40012400 	.word	0x40012400

08000fc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2310      	movs	r3, #16
 8000fce:	001a      	movs	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f001 ffad 	bl	8002f30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd6:	003b      	movs	r3, r7
 8000fd8:	0018      	movs	r0, r3
 8000fda:	2308      	movs	r3, #8
 8000fdc:	001a      	movs	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f001 ffa6 	bl	8002f30 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <MX_TIM2_Init+0xa4>)
 8000fe6:	2280      	movs	r2, #128	@ 0x80
 8000fe8:	05d2      	lsls	r2, r2, #23
 8000fea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <MX_TIM2_Init+0xa4>)
 8000fee:	2247      	movs	r2, #71	@ 0x47
 8000ff0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <MX_TIM2_Init+0xa4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <MX_TIM2_Init+0xa4>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4252      	negs	r2, r2
 8000ffe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <MX_TIM2_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <MX_TIM2_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800100c:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <MX_TIM2_Init+0xa4>)
 800100e:	0018      	movs	r0, r3
 8001010:	f001 fc9a 	bl	8002948 <HAL_TIM_Base_Init>
 8001014:	1e03      	subs	r3, r0, #0
 8001016:	d001      	beq.n	800101c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001018:	f000 f8d4 	bl	80011c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101c:	2108      	movs	r1, #8
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2280      	movs	r2, #128	@ 0x80
 8001022:	0152      	lsls	r2, r2, #5
 8001024:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001026:	187a      	adds	r2, r7, r1
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_TIM2_Init+0xa4>)
 800102a:	0011      	movs	r1, r2
 800102c:	0018      	movs	r0, r3
 800102e:	f001 fd25 	bl	8002a7c <HAL_TIM_ConfigClockSource>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001036:	f000 f8c5 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	003b      	movs	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	003b      	movs	r3, r7
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001046:	003a      	movs	r2, r7
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_TIM2_Init+0xa4>)
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f001 ff11 	bl	8002e74 <HAL_TIMEx_MasterConfigSynchronization>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001056:	f000 f8b5 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b006      	add	sp, #24
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	20000068 	.word	0x20000068

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b08b      	sub	sp, #44	@ 0x2c
 800106c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	2414      	movs	r4, #20
 8001070:	193b      	adds	r3, r7, r4
 8001072:	0018      	movs	r0, r3
 8001074:	2314      	movs	r3, #20
 8001076:	001a      	movs	r2, r3
 8001078:	2100      	movs	r1, #0
 800107a:	f001 ff59 	bl	8002f30 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107e:	4b4e      	ldr	r3, [pc, #312]	@ (80011b8 <MX_GPIO_Init+0x150>)
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	4b4d      	ldr	r3, [pc, #308]	@ (80011b8 <MX_GPIO_Init+0x150>)
 8001084:	2180      	movs	r1, #128	@ 0x80
 8001086:	03c9      	lsls	r1, r1, #15
 8001088:	430a      	orrs	r2, r1
 800108a:	615a      	str	r2, [r3, #20]
 800108c:	4b4a      	ldr	r3, [pc, #296]	@ (80011b8 <MX_GPIO_Init+0x150>)
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	03db      	lsls	r3, r3, #15
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b47      	ldr	r3, [pc, #284]	@ (80011b8 <MX_GPIO_Init+0x150>)
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	4b46      	ldr	r3, [pc, #280]	@ (80011b8 <MX_GPIO_Init+0x150>)
 80010a0:	2180      	movs	r1, #128	@ 0x80
 80010a2:	0289      	lsls	r1, r1, #10
 80010a4:	430a      	orrs	r2, r1
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	4b43      	ldr	r3, [pc, #268]	@ (80011b8 <MX_GPIO_Init+0x150>)
 80010aa:	695a      	ldr	r2, [r3, #20]
 80010ac:	2380      	movs	r3, #128	@ 0x80
 80010ae:	029b      	lsls	r3, r3, #10
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b40      	ldr	r3, [pc, #256]	@ (80011b8 <MX_GPIO_Init+0x150>)
 80010b8:	695a      	ldr	r2, [r3, #20]
 80010ba:	4b3f      	ldr	r3, [pc, #252]	@ (80011b8 <MX_GPIO_Init+0x150>)
 80010bc:	2180      	movs	r1, #128	@ 0x80
 80010be:	02c9      	lsls	r1, r1, #11
 80010c0:	430a      	orrs	r2, r1
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	4b3c      	ldr	r3, [pc, #240]	@ (80011b8 <MX_GPIO_Init+0x150>)
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	02db      	lsls	r3, r3, #11
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b39      	ldr	r3, [pc, #228]	@ (80011b8 <MX_GPIO_Init+0x150>)
 80010d4:	695a      	ldr	r2, [r3, #20]
 80010d6:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <MX_GPIO_Init+0x150>)
 80010d8:	2180      	movs	r1, #128	@ 0x80
 80010da:	0309      	lsls	r1, r1, #12
 80010dc:	430a      	orrs	r2, r1
 80010de:	615a      	str	r2, [r3, #20]
 80010e0:	4b35      	ldr	r3, [pc, #212]	@ (80011b8 <MX_GPIO_Init+0x150>)
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	031b      	lsls	r3, r3, #12
 80010e8:	4013      	ands	r3, r2
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80010ee:	2390      	movs	r3, #144	@ 0x90
 80010f0:	05db      	lsls	r3, r3, #23
 80010f2:	2200      	movs	r2, #0
 80010f4:	210f      	movs	r1, #15
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 ffcb 	bl	8002092 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	019b      	lsls	r3, r3, #6
 8001100:	482e      	ldr	r0, [pc, #184]	@ (80011bc <MX_GPIO_Init+0x154>)
 8001102:	2200      	movs	r2, #0
 8001104:	0019      	movs	r1, r3
 8001106:	f000 ffc4 	bl	8002092 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800110a:	23c0      	movs	r3, #192	@ 0xc0
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	482c      	ldr	r0, [pc, #176]	@ (80011c0 <MX_GPIO_Init+0x158>)
 8001110:	2200      	movs	r2, #0
 8001112:	0019      	movs	r1, r3
 8001114:	f000 ffbd 	bl	8002092 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001118:	193b      	adds	r3, r7, r4
 800111a:	220f      	movs	r2, #15
 800111c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	2201      	movs	r2, #1
 8001122:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	193b      	adds	r3, r7, r4
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	193a      	adds	r2, r7, r4
 8001132:	2390      	movs	r3, #144	@ 0x90
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	0011      	movs	r1, r2
 8001138:	0018      	movs	r0, r3
 800113a:	f000 fe1d 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800113e:	193b      	adds	r3, r7, r4
 8001140:	2210      	movs	r2, #16
 8001142:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	193b      	adds	r3, r7, r4
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114a:	193b      	adds	r3, r7, r4
 800114c:	2201      	movs	r2, #1
 800114e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	193a      	adds	r2, r7, r4
 8001152:	2390      	movs	r3, #144	@ 0x90
 8001154:	05db      	lsls	r3, r3, #23
 8001156:	0011      	movs	r1, r2
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fe0d 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800115e:	0021      	movs	r1, r4
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	0192      	lsls	r2, r2, #6
 8001166:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	000c      	movs	r4, r1
 800116a:	193b      	adds	r3, r7, r4
 800116c:	2201      	movs	r2, #1
 800116e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	193b      	adds	r3, r7, r4
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	193b      	adds	r3, r7, r4
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	193b      	adds	r3, r7, r4
 800117e:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <MX_GPIO_Init+0x154>)
 8001180:	0019      	movs	r1, r3
 8001182:	0010      	movs	r0, r2
 8001184:	f000 fdf8 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001188:	0021      	movs	r1, r4
 800118a:	187b      	adds	r3, r7, r1
 800118c:	22c0      	movs	r2, #192	@ 0xc0
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2201      	movs	r2, #1
 8001196:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <MX_GPIO_Init+0x158>)
 80011a8:	0019      	movs	r1, r3
 80011aa:	0010      	movs	r0, r2
 80011ac:	f000 fde4 	bl	8001d78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b0:	46c0      	nop			@ (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b00b      	add	sp, #44	@ 0x2c
 80011b6:	bd90      	pop	{r4, r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000400 	.word	0x48000400
 80011c0:	48000800 	.word	0x48000800

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	e7fd      	b.n	80011cc <Error_Handler+0x8>

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_MspInit+0x44>)
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_MspInit+0x44>)
 80011dc:	2101      	movs	r1, #1
 80011de:	430a      	orrs	r2, r1
 80011e0:	619a      	str	r2, [r3, #24]
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_MspInit+0x44>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	2201      	movs	r2, #1
 80011e8:	4013      	ands	r3, r2
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_MspInit+0x44>)
 80011f0:	69da      	ldr	r2, [r3, #28]
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_MspInit+0x44>)
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	0549      	lsls	r1, r1, #21
 80011f8:	430a      	orrs	r2, r1
 80011fa:	61da      	str	r2, [r3, #28]
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_MspInit+0x44>)
 80011fe:	69da      	ldr	r2, [r3, #28]
 8001200:	2380      	movs	r3, #128	@ 0x80
 8001202:	055b      	lsls	r3, r3, #21
 8001204:	4013      	ands	r3, r2
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b08b      	sub	sp, #44	@ 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	2414      	movs	r4, #20
 8001222:	193b      	adds	r3, r7, r4
 8001224:	0018      	movs	r0, r3
 8001226:	2314      	movs	r3, #20
 8001228:	001a      	movs	r2, r3
 800122a:	2100      	movs	r1, #0
 800122c:	f001 fe80 	bl	8002f30 <memset>
  if(hadc->Instance==ADC1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a19      	ldr	r2, [pc, #100]	@ (800129c <HAL_ADC_MspInit+0x84>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d12b      	bne.n	8001292 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123a:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <HAL_ADC_MspInit+0x88>)
 800123c:	699a      	ldr	r2, [r3, #24]
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <HAL_ADC_MspInit+0x88>)
 8001240:	2180      	movs	r1, #128	@ 0x80
 8001242:	0089      	lsls	r1, r1, #2
 8001244:	430a      	orrs	r2, r1
 8001246:	619a      	str	r2, [r3, #24]
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <HAL_ADC_MspInit+0x88>)
 800124a:	699a      	ldr	r2, [r3, #24]
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_ADC_MspInit+0x88>)
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <HAL_ADC_MspInit+0x88>)
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	0289      	lsls	r1, r1, #10
 8001260:	430a      	orrs	r2, r1
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <HAL_ADC_MspInit+0x88>)
 8001266:	695a      	ldr	r2, [r3, #20]
 8001268:	2380      	movs	r3, #128	@ 0x80
 800126a:	029b      	lsls	r3, r3, #10
 800126c:	4013      	ands	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001272:	193b      	adds	r3, r7, r4
 8001274:	2220      	movs	r2, #32
 8001276:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001278:	193b      	adds	r3, r7, r4
 800127a:	2203      	movs	r2, #3
 800127c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	193a      	adds	r2, r7, r4
 8001286:	2390      	movs	r3, #144	@ 0x90
 8001288:	05db      	lsls	r3, r3, #23
 800128a:	0011      	movs	r1, r2
 800128c:	0018      	movs	r0, r3
 800128e:	f000 fd73 	bl	8001d78 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b00b      	add	sp, #44	@ 0x2c
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	40012400 	.word	0x40012400
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	05db      	lsls	r3, r3, #23
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d10b      	bne.n	80012d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b8:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <HAL_TIM_Base_MspInit+0x34>)
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_TIM_Base_MspInit+0x34>)
 80012be:	2101      	movs	r1, #1
 80012c0:	430a      	orrs	r2, r1
 80012c2:	61da      	str	r2, [r3, #28]
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <HAL_TIM_Base_MspInit+0x34>)
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b004      	add	sp, #16
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e0:	46c0      	nop			@ (mov r8, r8)
 80012e2:	e7fd      	b.n	80012e0 <NMI_Handler+0x4>

080012e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	e7fd      	b.n	80012e8 <HardFault_Handler+0x4>

080012ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f000 f87a 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001318:	480d      	ldr	r0, [pc, #52]	@ (8001350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800131a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800131c:	f7ff fff7 	bl	800130e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001320:	480c      	ldr	r0, [pc, #48]	@ (8001354 <LoopForever+0x6>)
  ldr r1, =_edata
 8001322:	490d      	ldr	r1, [pc, #52]	@ (8001358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001324:	4a0d      	ldr	r2, [pc, #52]	@ (800135c <LoopForever+0xe>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001338:	4c0a      	ldr	r4, [pc, #40]	@ (8001364 <LoopForever+0x16>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001346:	f001 fdfb 	bl	8002f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134a:	f7ff fd27 	bl	8000d9c <main>

0800134e <LoopForever>:

LoopForever:
    b LoopForever
 800134e:	e7fe      	b.n	800134e <LoopForever>
  ldr   r0, =_estack
 8001350:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800135c:	08003054 	.word	0x08003054
  ldr r2, =_sbss
 8001360:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001364:	200000bc 	.word	0x200000bc

08001368 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_COMP_IRQHandler>
	...

0800136c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001370:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <HAL_Init+0x24>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_Init+0x24>)
 8001376:	2110      	movs	r1, #16
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800137c:	2000      	movs	r0, #0
 800137e:	f000 f809 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001382:	f7ff ff25 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <HAL_InitTick+0x5c>)
 800139e:	681c      	ldr	r4, [r3, #0]
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_InitTick+0x60>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	0019      	movs	r1, r3
 80013a6:	23fa      	movs	r3, #250	@ 0xfa
 80013a8:	0098      	lsls	r0, r3, #2
 80013aa:	f7fe fead 	bl	8000108 <__udivsi3>
 80013ae:	0003      	movs	r3, r0
 80013b0:	0019      	movs	r1, r3
 80013b2:	0020      	movs	r0, r4
 80013b4:	f7fe fea8 	bl	8000108 <__udivsi3>
 80013b8:	0003      	movs	r3, r0
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 fccf 	bl	8001d5e <HAL_SYSTICK_Config>
 80013c0:	1e03      	subs	r3, r0, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e00f      	b.n	80013e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d80b      	bhi.n	80013e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	2301      	movs	r3, #1
 80013d2:	425b      	negs	r3, r3
 80013d4:	2200      	movs	r2, #0
 80013d6:	0018      	movs	r0, r3
 80013d8:	f000 fcac 	bl	8001d34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_InitTick+0x64>)
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b003      	add	sp, #12
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <HAL_IncTick+0x1c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	001a      	movs	r2, r3
 8001406:	4b05      	ldr	r3, [pc, #20]	@ (800141c <HAL_IncTick+0x20>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	18d2      	adds	r2, r2, r3
 800140c:	4b03      	ldr	r3, [pc, #12]	@ (800141c <HAL_IncTick+0x20>)
 800140e:	601a      	str	r2, [r3, #0]
}
 8001410:	46c0      	nop			@ (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	20000008 	.word	0x20000008
 800141c:	200000b8 	.word	0x200000b8

08001420 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b02      	ldr	r3, [pc, #8]	@ (8001430 <HAL_GetTick+0x10>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	200000b8 	.word	0x200000b8

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff fff0 	bl	8001420 <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3301      	adds	r3, #1
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	001a      	movs	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	189b      	adds	r3, r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	f7ff ffe0 	bl	8001420 <HAL_GetTick>
 8001460:	0002      	movs	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	46c0      	nop			@ (mov r8, r8)
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b004      	add	sp, #16
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	20000008 	.word	0x20000008

0800147c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001484:	230f      	movs	r3, #15
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e125      	b.n	80016e6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10a      	bne.n	80014b8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2234      	movs	r2, #52	@ 0x34
 80014ac:	2100      	movs	r1, #0
 80014ae:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff feb0 	bl	8001218 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014bc:	2210      	movs	r2, #16
 80014be:	4013      	ands	r3, r2
 80014c0:	d000      	beq.n	80014c4 <HAL_ADC_Init+0x48>
 80014c2:	e103      	b.n	80016cc <HAL_ADC_Init+0x250>
 80014c4:	230f      	movs	r3, #15
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d000      	beq.n	80014d0 <HAL_ADC_Init+0x54>
 80014ce:	e0fd      	b.n	80016cc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2204      	movs	r2, #4
 80014d8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80014da:	d000      	beq.n	80014de <HAL_ADC_Init+0x62>
 80014dc:	e0f6      	b.n	80016cc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014e2:	4a83      	ldr	r2, [pc, #524]	@ (80016f0 <HAL_ADC_Init+0x274>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	2202      	movs	r2, #2
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2203      	movs	r2, #3
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d112      	bne.n	8001522 <HAL_ADC_Init+0xa6>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2201      	movs	r2, #1
 8001504:	4013      	ands	r3, r2
 8001506:	2b01      	cmp	r3, #1
 8001508:	d009      	beq.n	800151e <HAL_ADC_Init+0xa2>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	401a      	ands	r2, r3
 8001516:	2380      	movs	r3, #128	@ 0x80
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	429a      	cmp	r2, r3
 800151c:	d101      	bne.n	8001522 <HAL_ADC_Init+0xa6>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_ADC_Init+0xa8>
 8001522:	2300      	movs	r3, #0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d116      	bne.n	8001556 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2218      	movs	r2, #24
 8001530:	4393      	bics	r3, r2
 8001532:	0019      	movs	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	0899      	lsrs	r1, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4964      	ldr	r1, [pc, #400]	@ (80016f4 <HAL_ADC_Init+0x278>)
 8001562:	400a      	ands	r2, r1
 8001564:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7e1b      	ldrb	r3, [r3, #24]
 800156a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e5b      	ldrb	r3, [r3, #25]
 8001570:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001572:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e9b      	ldrb	r3, [r3, #26]
 8001578:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800157a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001580:	2b01      	cmp	r3, #1
 8001582:	d002      	beq.n	800158a <HAL_ADC_Init+0x10e>
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	015b      	lsls	r3, r3, #5
 8001588:	e000      	b.n	800158c <HAL_ADC_Init+0x110>
 800158a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800158c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001592:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_Init+0x124>
 800159c:	2304      	movs	r3, #4
 800159e:	e000      	b.n	80015a2 <HAL_ADC_Init+0x126>
 80015a0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80015a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2124      	movs	r1, #36	@ 0x24
 80015a8:	5c5b      	ldrb	r3, [r3, r1]
 80015aa:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015ac:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7edb      	ldrb	r3, [r3, #27]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d115      	bne.n	80015e8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7e9b      	ldrb	r3, [r3, #26]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d105      	bne.n	80015d0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2280      	movs	r2, #128	@ 0x80
 80015c8:	0252      	lsls	r2, r2, #9
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	e00b      	b.n	80015e8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d4:	2220      	movs	r2, #32
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015e0:	2201      	movs	r2, #1
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	23c2      	movs	r3, #194	@ 0xc2
 80015ee:	33ff      	adds	r3, #255	@ 0xff
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d007      	beq.n	8001604 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80015fc:	4313      	orrs	r3, r2
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	4313      	orrs	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68d9      	ldr	r1, [r3, #12]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	430a      	orrs	r2, r1
 8001612:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001618:	2380      	movs	r3, #128	@ 0x80
 800161a:	055b      	lsls	r3, r3, #21
 800161c:	429a      	cmp	r2, r3
 800161e:	d01b      	beq.n	8001658 <HAL_ADC_Init+0x1dc>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001624:	2b01      	cmp	r3, #1
 8001626:	d017      	beq.n	8001658 <HAL_ADC_Init+0x1dc>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162c:	2b02      	cmp	r3, #2
 800162e:	d013      	beq.n	8001658 <HAL_ADC_Init+0x1dc>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001634:	2b03      	cmp	r3, #3
 8001636:	d00f      	beq.n	8001658 <HAL_ADC_Init+0x1dc>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	2b04      	cmp	r3, #4
 800163e:	d00b      	beq.n	8001658 <HAL_ADC_Init+0x1dc>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001644:	2b05      	cmp	r3, #5
 8001646:	d007      	beq.n	8001658 <HAL_ADC_Init+0x1dc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	2b06      	cmp	r3, #6
 800164e:	d003      	beq.n	8001658 <HAL_ADC_Init+0x1dc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001654:	2b07      	cmp	r3, #7
 8001656:	d112      	bne.n	800167e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2107      	movs	r1, #7
 8001664:	438a      	bics	r2, r1
 8001666:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6959      	ldr	r1, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001672:	2207      	movs	r2, #7
 8001674:	401a      	ands	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4a1c      	ldr	r2, [pc, #112]	@ (80016f8 <HAL_ADC_Init+0x27c>)
 8001686:	4013      	ands	r3, r2
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	429a      	cmp	r2, r3
 800168c:	d10b      	bne.n	80016a6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001698:	2203      	movs	r2, #3
 800169a:	4393      	bics	r3, r2
 800169c:	2201      	movs	r2, #1
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016a4:	e01c      	b.n	80016e0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016aa:	2212      	movs	r2, #18
 80016ac:	4393      	bics	r3, r2
 80016ae:	2210      	movs	r2, #16
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ba:	2201      	movs	r2, #1
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80016c2:	230f      	movs	r3, #15
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016ca:	e009      	b.n	80016e0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d0:	2210      	movs	r2, #16
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80016d8:	230f      	movs	r3, #15
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016e0:	230f      	movs	r3, #15
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	781b      	ldrb	r3, [r3, #0]
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b004      	add	sp, #16
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	fffffefd 	.word	0xfffffefd
 80016f4:	fffe0219 	.word	0xfffe0219
 80016f8:	833fffe7 	.word	0x833fffe7

080016fc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	230f      	movs	r3, #15
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2204      	movs	r2, #4
 8001714:	4013      	ands	r3, r2
 8001716:	d138      	bne.n	800178a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2234      	movs	r2, #52	@ 0x34
 800171c:	5c9b      	ldrb	r3, [r3, r2]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_ADC_Start+0x2a>
 8001722:	2302      	movs	r3, #2
 8001724:	e038      	b.n	8001798 <HAL_ADC_Start+0x9c>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2234      	movs	r2, #52	@ 0x34
 800172a:	2101      	movs	r1, #1
 800172c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7e5b      	ldrb	r3, [r3, #25]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d007      	beq.n	8001746 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001736:	230f      	movs	r3, #15
 8001738:	18fc      	adds	r4, r7, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	0018      	movs	r0, r3
 800173e:	f000 f9e3 	bl	8001b08 <ADC_Enable>
 8001742:	0003      	movs	r3, r0
 8001744:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001746:	230f      	movs	r3, #15
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d120      	bne.n	8001792 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001754:	4a12      	ldr	r2, [pc, #72]	@ (80017a0 <HAL_ADC_Start+0xa4>)
 8001756:	4013      	ands	r3, r2
 8001758:	2280      	movs	r2, #128	@ 0x80
 800175a:	0052      	lsls	r2, r2, #1
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2234      	movs	r2, #52	@ 0x34
 800176c:	2100      	movs	r1, #0
 800176e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	221c      	movs	r2, #28
 8001776:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2104      	movs	r1, #4
 8001784:	430a      	orrs	r2, r1
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	e003      	b.n	8001792 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800178a:	230f      	movs	r3, #15
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	2202      	movs	r2, #2
 8001790:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001792:	230f      	movs	r3, #15
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	781b      	ldrb	r3, [r3, #0]
}
 8001798:	0018      	movs	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	b005      	add	sp, #20
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	fffff0fe 	.word	0xfffff0fe

080017a4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d102      	bne.n	80017bc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80017b6:	2308      	movs	r3, #8
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e014      	b.n	80017e6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d10b      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ce:	2220      	movs	r2, #32
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2234      	movs	r2, #52	@ 0x34
 80017da:	2100      	movs	r1, #0
 80017dc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e071      	b.n	80018c6 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80017e2:	230c      	movs	r3, #12
 80017e4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80017e6:	f7ff fe1b 	bl	8001420 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017ee:	e01f      	b.n	8001830 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	d01c      	beq.n	8001830 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <HAL_ADC_PollForConversion+0x68>
 80017fc:	f7ff fe10 	bl	8001420 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d211      	bcs.n	8001830 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4013      	ands	r3, r2
 8001816:	d10b      	bne.n	8001830 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181c:	2204      	movs	r2, #4
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2234      	movs	r2, #52	@ 0x34
 8001828:	2100      	movs	r1, #0
 800182a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e04a      	b.n	80018c6 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	d0d9      	beq.n	80017f0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	23c0      	movs	r3, #192	@ 0xc0
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	4013      	ands	r3, r2
 8001856:	d12d      	bne.n	80018b4 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800185c:	2b00      	cmp	r3, #0
 800185e:	d129      	bne.n	80018b4 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2208      	movs	r2, #8
 8001868:	4013      	ands	r3, r2
 800186a:	2b08      	cmp	r3, #8
 800186c:	d122      	bne.n	80018b4 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2204      	movs	r2, #4
 8001876:	4013      	ands	r3, r2
 8001878:	d110      	bne.n	800189c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	210c      	movs	r1, #12
 8001886:	438a      	bics	r2, r1
 8001888:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800188e:	4a10      	ldr	r2, [pc, #64]	@ (80018d0 <HAL_ADC_PollForConversion+0x12c>)
 8001890:	4013      	ands	r3, r2
 8001892:	2201      	movs	r2, #1
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	639a      	str	r2, [r3, #56]	@ 0x38
 800189a:	e00b      	b.n	80018b4 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a0:	2220      	movs	r2, #32
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ac:	2201      	movs	r2, #1
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7e1b      	ldrb	r3, [r3, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d103      	bne.n	80018c4 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	220c      	movs	r2, #12
 80018c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b004      	add	sp, #16
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	fffffefe 	.word	0xfffffefe

080018d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80018e2:	0018      	movs	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b002      	add	sp, #8
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f6:	230f      	movs	r3, #15
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	055b      	lsls	r3, r3, #21
 800190a:	429a      	cmp	r2, r3
 800190c:	d011      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x46>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	2b01      	cmp	r3, #1
 8001914:	d00d      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x46>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191a:	2b02      	cmp	r3, #2
 800191c:	d009      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x46>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001922:	2b03      	cmp	r3, #3
 8001924:	d005      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x46>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192a:	2b04      	cmp	r3, #4
 800192c:	d001      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x46>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2234      	movs	r2, #52	@ 0x34
 8001936:	5c9b      	ldrb	r3, [r3, r2]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x54>
 800193c:	2302      	movs	r3, #2
 800193e:	e0d0      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x1f6>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2234      	movs	r2, #52	@ 0x34
 8001944:	2101      	movs	r1, #1
 8001946:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2204      	movs	r2, #4
 8001950:	4013      	ands	r3, r2
 8001952:	d000      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x6a>
 8001954:	e0b4      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a64      	ldr	r2, [pc, #400]	@ (8001aec <HAL_ADC_ConfigChannel+0x200>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d100      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x76>
 8001960:	e082      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	409a      	lsls	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800197c:	2380      	movs	r3, #128	@ 0x80
 800197e:	055b      	lsls	r3, r3, #21
 8001980:	429a      	cmp	r2, r3
 8001982:	d037      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001988:	2b01      	cmp	r3, #1
 800198a:	d033      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001990:	2b02      	cmp	r3, #2
 8001992:	d02f      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001998:	2b03      	cmp	r3, #3
 800199a:	d02b      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d027      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d023      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	2b06      	cmp	r3, #6
 80019b2:	d01f      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	d01b      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2107      	movs	r1, #7
 80019c8:	400b      	ands	r3, r1
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d012      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2107      	movs	r1, #7
 80019da:	438a      	bics	r2, r1
 80019dc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6959      	ldr	r1, [r3, #20]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2207      	movs	r2, #7
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d007      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x120>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b11      	cmp	r3, #17
 8001a02:	d003      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x120>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b12      	cmp	r3, #18
 8001a0a:	d163      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a0c:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_ADC_ConfigChannel+0x204>)
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d009      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x140>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b11      	cmp	r3, #17
 8001a1e:	d102      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x13a>
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	03db      	lsls	r3, r3, #15
 8001a24:	e004      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x144>
 8001a26:	2380      	movs	r3, #128	@ 0x80
 8001a28:	045b      	lsls	r3, r3, #17
 8001a2a:	e001      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x144>
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	4a2f      	ldr	r2, [pc, #188]	@ (8001af0 <HAL_ADC_ConfigChannel+0x204>)
 8001a32:	430b      	orrs	r3, r1
 8001a34:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d14a      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <HAL_ADC_ConfigChannel+0x208>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	492d      	ldr	r1, [pc, #180]	@ (8001af8 <HAL_ADC_ConfigChannel+0x20c>)
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7fe fb5f 	bl	8000108 <__udivsi3>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	001a      	movs	r2, r3
 8001a4e:	0013      	movs	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	189b      	adds	r3, r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a58:	e002      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f9      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x16e>
 8001a66:	e035      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2101      	movs	r1, #1
 8001a74:	4099      	lsls	r1, r3
 8001a76:	000b      	movs	r3, r1
 8001a78:	43d9      	mvns	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	400a      	ands	r2, r1
 8001a80:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d007      	beq.n	8001a9a <HAL_ADC_ConfigChannel+0x1ae>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b11      	cmp	r3, #17
 8001a90:	d003      	beq.n	8001a9a <HAL_ADC_ConfigChannel+0x1ae>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b12      	cmp	r3, #18
 8001a98:	d11c      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_ADC_ConfigChannel+0x204>)
 8001a9c:	6819      	ldr	r1, [r3, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b10      	cmp	r3, #16
 8001aa4:	d007      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x1ca>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b11      	cmp	r3, #17
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x1c6>
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <HAL_ADC_ConfigChannel+0x210>)
 8001ab0:	e002      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ab2:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <HAL_ADC_ConfigChannel+0x214>)
 8001ab4:	e000      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <HAL_ADC_ConfigChannel+0x218>)
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <HAL_ADC_ConfigChannel+0x204>)
 8001aba:	400b      	ands	r3, r1
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e009      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001acc:	230f      	movs	r3, #15
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2234      	movs	r2, #52	@ 0x34
 8001ad8:	2100      	movs	r1, #0
 8001ada:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001adc:	230f      	movs	r3, #15
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	00001001 	.word	0x00001001
 8001af0:	40012708 	.word	0x40012708
 8001af4:	20000000 	.word	0x20000000
 8001af8:	000f4240 	.word	0x000f4240
 8001afc:	ffbfffff 	.word	0xffbfffff
 8001b00:	feffffff 	.word	0xfeffffff
 8001b04:	ff7fffff 	.word	0xff7fffff

08001b08 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2203      	movs	r2, #3
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d112      	bne.n	8001b4c <ADC_Enable+0x44>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d009      	beq.n	8001b48 <ADC_Enable+0x40>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	401a      	ands	r2, r3
 8001b40:	2380      	movs	r3, #128	@ 0x80
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d101      	bne.n	8001b4c <ADC_Enable+0x44>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <ADC_Enable+0x46>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d152      	bne.n	8001bf8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a2a      	ldr	r2, [pc, #168]	@ (8001c04 <ADC_Enable+0xfc>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d00d      	beq.n	8001b7a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b62:	2210      	movs	r2, #16
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6e:	2201      	movs	r2, #1
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e03f      	b.n	8001bfa <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <ADC_Enable+0x100>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	491f      	ldr	r1, [pc, #124]	@ (8001c0c <ADC_Enable+0x104>)
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7fe fab9 	bl	8000108 <__udivsi3>
 8001b96:	0003      	movs	r3, r0
 8001b98:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b9a:	e002      	b.n	8001ba2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f9      	bne.n	8001b9c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ba8:	f7ff fc3a 	bl	8001420 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bb0:	e01b      	b.n	8001bea <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bb2:	f7ff fc35 	bl	8001420 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d914      	bls.n	8001bea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d00d      	beq.n	8001bea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bde:	2201      	movs	r2, #1
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e007      	b.n	8001bfa <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d1dc      	bne.n	8001bb2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b004      	add	sp, #16
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	80000017 	.word	0x80000017
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	000f4240 	.word	0x000f4240

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	0002      	movs	r2, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c24:	d828      	bhi.n	8001c78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c26:	4a2f      	ldr	r2, [pc, #188]	@ (8001ce4 <__NVIC_SetPriority+0xd4>)
 8001c28:	1dfb      	adds	r3, r7, #7
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	33c0      	adds	r3, #192	@ 0xc0
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	589b      	ldr	r3, [r3, r2]
 8001c36:	1dfa      	adds	r2, r7, #7
 8001c38:	7812      	ldrb	r2, [r2, #0]
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	400a      	ands	r2, r1
 8001c40:	00d2      	lsls	r2, r2, #3
 8001c42:	21ff      	movs	r1, #255	@ 0xff
 8001c44:	4091      	lsls	r1, r2
 8001c46:	000a      	movs	r2, r1
 8001c48:	43d2      	mvns	r2, r2
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	019b      	lsls	r3, r3, #6
 8001c52:	22ff      	movs	r2, #255	@ 0xff
 8001c54:	401a      	ands	r2, r3
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	4003      	ands	r3, r0
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c64:	481f      	ldr	r0, [pc, #124]	@ (8001ce4 <__NVIC_SetPriority+0xd4>)
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	33c0      	adds	r3, #192	@ 0xc0
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c76:	e031      	b.n	8001cdc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c78:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce8 <__NVIC_SetPriority+0xd8>)
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	0019      	movs	r1, r3
 8001c80:	230f      	movs	r3, #15
 8001c82:	400b      	ands	r3, r1
 8001c84:	3b08      	subs	r3, #8
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3306      	adds	r3, #6
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	18d3      	adds	r3, r2, r3
 8001c8e:	3304      	adds	r3, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	1dfa      	adds	r2, r7, #7
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	0011      	movs	r1, r2
 8001c98:	2203      	movs	r2, #3
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	00d2      	lsls	r2, r2, #3
 8001c9e:	21ff      	movs	r1, #255	@ 0xff
 8001ca0:	4091      	lsls	r1, r2
 8001ca2:	000a      	movs	r2, r1
 8001ca4:	43d2      	mvns	r2, r2
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	019b      	lsls	r3, r3, #6
 8001cae:	22ff      	movs	r2, #255	@ 0xff
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	1dfb      	adds	r3, r7, #7
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	2303      	movs	r3, #3
 8001cba:	4003      	ands	r3, r0
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cc0:	4809      	ldr	r0, [pc, #36]	@ (8001ce8 <__NVIC_SetPriority+0xd8>)
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	001c      	movs	r4, r3
 8001cc8:	230f      	movs	r3, #15
 8001cca:	4023      	ands	r3, r4
 8001ccc:	3b08      	subs	r3, #8
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	3306      	adds	r3, #6
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	18c3      	adds	r3, r0, r3
 8001cd8:	3304      	adds	r3, #4
 8001cda:	601a      	str	r2, [r3, #0]
}
 8001cdc:	46c0      	nop			@ (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b003      	add	sp, #12
 8001ce2:	bd90      	pop	{r4, r7, pc}
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	1e5a      	subs	r2, r3, #1
 8001cf8:	2380      	movs	r3, #128	@ 0x80
 8001cfa:	045b      	lsls	r3, r3, #17
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d301      	bcc.n	8001d04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d00:	2301      	movs	r3, #1
 8001d02:	e010      	b.n	8001d26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d04:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <SysTick_Config+0x44>)
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	3a01      	subs	r2, #1
 8001d0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	425b      	negs	r3, r3
 8001d10:	2103      	movs	r1, #3
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7ff ff7c 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <SysTick_Config+0x44>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <SysTick_Config+0x44>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	210f      	movs	r1, #15
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	1c02      	adds	r2, r0, #0
 8001d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b25b      	sxtb	r3, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff ff5d 	bl	8001c10 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b004      	add	sp, #16
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff ffbf 	bl	8001cec <SysTick_Config>
 8001d6e:	0003      	movs	r3, r0
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	e14f      	b.n	8002028 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4091      	lsls	r1, r2
 8001d92:	000a      	movs	r2, r1
 8001d94:	4013      	ands	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d100      	bne.n	8001da0 <HAL_GPIO_Init+0x28>
 8001d9e:	e140      	b.n	8002022 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2203      	movs	r2, #3
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d005      	beq.n	8001db8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d130      	bne.n	8001e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	0013      	movs	r3, r2
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dee:	2201      	movs	r2, #1
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
 8001df4:	0013      	movs	r3, r2
 8001df6:	43da      	mvns	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	2201      	movs	r2, #1
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	0013      	movs	r3, r2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d017      	beq.n	8001e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	409a      	lsls	r2, r3
 8001e34:	0013      	movs	r3, r2
 8001e36:	43da      	mvns	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	409a      	lsls	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d123      	bne.n	8001eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3208      	adds	r2, #8
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	58d3      	ldr	r3, [r2, r3]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2207      	movs	r2, #7
 8001e74:	4013      	ands	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	220f      	movs	r2, #15
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2107      	movs	r1, #7
 8001e8e:	400b      	ands	r3, r1
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	409a      	lsls	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	08da      	lsrs	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3208      	adds	r2, #8
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	6939      	ldr	r1, [r7, #16]
 8001ea8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	0013      	movs	r3, r2
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	401a      	ands	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	0013      	movs	r3, r2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	23c0      	movs	r3, #192	@ 0xc0
 8001ee4:	029b      	lsls	r3, r3, #10
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d100      	bne.n	8001eec <HAL_GPIO_Init+0x174>
 8001eea:	e09a      	b.n	8002022 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eec:	4b54      	ldr	r3, [pc, #336]	@ (8002040 <HAL_GPIO_Init+0x2c8>)
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	4b53      	ldr	r3, [pc, #332]	@ (8002040 <HAL_GPIO_Init+0x2c8>)
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	619a      	str	r2, [r3, #24]
 8001ef8:	4b51      	ldr	r3, [pc, #324]	@ (8002040 <HAL_GPIO_Init+0x2c8>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4013      	ands	r3, r2
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f04:	4a4f      	ldr	r2, [pc, #316]	@ (8002044 <HAL_GPIO_Init+0x2cc>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	589b      	ldr	r3, [r3, r2]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2203      	movs	r2, #3
 8001f16:	4013      	ands	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	0013      	movs	r3, r2
 8001f20:	43da      	mvns	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	2390      	movs	r3, #144	@ 0x90
 8001f2c:	05db      	lsls	r3, r3, #23
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0x1e2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a44      	ldr	r2, [pc, #272]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00d      	beq.n	8001f56 <HAL_GPIO_Init+0x1de>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a43      	ldr	r2, [pc, #268]	@ (800204c <HAL_GPIO_Init+0x2d4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <HAL_GPIO_Init+0x1da>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a42      	ldr	r2, [pc, #264]	@ (8002050 <HAL_GPIO_Init+0x2d8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_GPIO_Init+0x1d6>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x1e4>
 8001f4e:	2305      	movs	r3, #5
 8001f50:	e004      	b.n	8001f5c <HAL_GPIO_Init+0x1e4>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_Init+0x1e4>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_GPIO_Init+0x1e4>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	2103      	movs	r1, #3
 8001f60:	400a      	ands	r2, r1
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4093      	lsls	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f6c:	4935      	ldr	r1, [pc, #212]	@ (8002044 <HAL_GPIO_Init+0x2cc>)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f7a:	4b36      	ldr	r3, [pc, #216]	@ (8002054 <HAL_GPIO_Init+0x2dc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43da      	mvns	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	2380      	movs	r3, #128	@ 0x80
 8001f90:	035b      	lsls	r3, r3, #13
 8001f92:	4013      	ands	r3, r2
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002054 <HAL_GPIO_Init+0x2dc>)
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002054 <HAL_GPIO_Init+0x2dc>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43da      	mvns	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	039b      	lsls	r3, r3, #14
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fc8:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <HAL_GPIO_Init+0x2dc>)
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001fce:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <HAL_GPIO_Init+0x2dc>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <HAL_GPIO_Init+0x2dc>)
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <HAL_GPIO_Init+0x2dc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43da      	mvns	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	025b      	lsls	r3, r3, #9
 8002010:	4013      	ands	r3, r2
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800201c:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <HAL_GPIO_Init+0x2dc>)
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	40da      	lsrs	r2, r3
 8002030:	1e13      	subs	r3, r2, #0
 8002032:	d000      	beq.n	8002036 <HAL_GPIO_Init+0x2be>
 8002034:	e6a8      	b.n	8001d88 <HAL_GPIO_Init+0x10>
  } 
}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	46c0      	nop			@ (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b006      	add	sp, #24
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	40010000 	.word	0x40010000
 8002048:	48000400 	.word	0x48000400
 800204c:	48000800 	.word	0x48000800
 8002050:	48000c00 	.word	0x48000c00
 8002054:	40010400 	.word	0x40010400

08002058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	000a      	movs	r2, r1
 8002062:	1cbb      	adds	r3, r7, #2
 8002064:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	1cba      	adds	r2, r7, #2
 800206c:	8812      	ldrh	r2, [r2, #0]
 800206e:	4013      	ands	r3, r2
 8002070:	d004      	beq.n	800207c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002072:	230f      	movs	r3, #15
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e003      	b.n	8002084 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800207c:	230f      	movs	r3, #15
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002084:	230f      	movs	r3, #15
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	781b      	ldrb	r3, [r3, #0]
  }
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b004      	add	sp, #16
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	0008      	movs	r0, r1
 800209c:	0011      	movs	r1, r2
 800209e:	1cbb      	adds	r3, r7, #2
 80020a0:	1c02      	adds	r2, r0, #0
 80020a2:	801a      	strh	r2, [r3, #0]
 80020a4:	1c7b      	adds	r3, r7, #1
 80020a6:	1c0a      	adds	r2, r1, #0
 80020a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020aa:	1c7b      	adds	r3, r7, #1
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d004      	beq.n	80020bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020b2:	1cbb      	adds	r3, r7, #2
 80020b4:	881a      	ldrh	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020ba:	e003      	b.n	80020c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020bc:	1cbb      	adds	r3, r7, #2
 80020be:	881a      	ldrh	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020c4:	46c0      	nop			@ (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e301      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	4013      	ands	r3, r2
 80020e6:	d100      	bne.n	80020ea <HAL_RCC_OscConfig+0x1e>
 80020e8:	e08d      	b.n	8002206 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020ea:	4bc3      	ldr	r3, [pc, #780]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	220c      	movs	r2, #12
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d00e      	beq.n	8002114 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f6:	4bc0      	ldr	r3, [pc, #768]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	220c      	movs	r2, #12
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d116      	bne.n	8002130 <HAL_RCC_OscConfig+0x64>
 8002102:	4bbd      	ldr	r3, [pc, #756]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	2380      	movs	r3, #128	@ 0x80
 8002108:	025b      	lsls	r3, r3, #9
 800210a:	401a      	ands	r2, r3
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	025b      	lsls	r3, r3, #9
 8002110:	429a      	cmp	r2, r3
 8002112:	d10d      	bne.n	8002130 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	4bb8      	ldr	r3, [pc, #736]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	029b      	lsls	r3, r3, #10
 800211c:	4013      	ands	r3, r2
 800211e:	d100      	bne.n	8002122 <HAL_RCC_OscConfig+0x56>
 8002120:	e070      	b.n	8002204 <HAL_RCC_OscConfig+0x138>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d000      	beq.n	800212c <HAL_RCC_OscConfig+0x60>
 800212a:	e06b      	b.n	8002204 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e2d8      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d107      	bne.n	8002148 <HAL_RCC_OscConfig+0x7c>
 8002138:	4baf      	ldr	r3, [pc, #700]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4bae      	ldr	r3, [pc, #696]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800213e:	2180      	movs	r1, #128	@ 0x80
 8002140:	0249      	lsls	r1, r1, #9
 8002142:	430a      	orrs	r2, r1
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e02f      	b.n	80021a8 <HAL_RCC_OscConfig+0xdc>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10c      	bne.n	800216a <HAL_RCC_OscConfig+0x9e>
 8002150:	4ba9      	ldr	r3, [pc, #676]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4ba8      	ldr	r3, [pc, #672]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002156:	49a9      	ldr	r1, [pc, #676]	@ (80023fc <HAL_RCC_OscConfig+0x330>)
 8002158:	400a      	ands	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	4ba6      	ldr	r3, [pc, #664]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4ba5      	ldr	r3, [pc, #660]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002162:	49a7      	ldr	r1, [pc, #668]	@ (8002400 <HAL_RCC_OscConfig+0x334>)
 8002164:	400a      	ands	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e01e      	b.n	80021a8 <HAL_RCC_OscConfig+0xdc>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d10e      	bne.n	8002190 <HAL_RCC_OscConfig+0xc4>
 8002172:	4ba1      	ldr	r3, [pc, #644]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4ba0      	ldr	r3, [pc, #640]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002178:	2180      	movs	r1, #128	@ 0x80
 800217a:	02c9      	lsls	r1, r1, #11
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	4b9d      	ldr	r3, [pc, #628]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b9c      	ldr	r3, [pc, #624]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002186:	2180      	movs	r1, #128	@ 0x80
 8002188:	0249      	lsls	r1, r1, #9
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0xdc>
 8002190:	4b99      	ldr	r3, [pc, #612]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b98      	ldr	r3, [pc, #608]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002196:	4999      	ldr	r1, [pc, #612]	@ (80023fc <HAL_RCC_OscConfig+0x330>)
 8002198:	400a      	ands	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	4b96      	ldr	r3, [pc, #600]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b95      	ldr	r3, [pc, #596]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80021a2:	4997      	ldr	r1, [pc, #604]	@ (8002400 <HAL_RCC_OscConfig+0x334>)
 80021a4:	400a      	ands	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d014      	beq.n	80021da <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff f936 	bl	8001420 <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ba:	f7ff f931 	bl	8001420 <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	@ 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e28a      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021cc:	4b8a      	ldr	r3, [pc, #552]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	029b      	lsls	r3, r3, #10
 80021d4:	4013      	ands	r3, r2
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0xee>
 80021d8:	e015      	b.n	8002206 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff f921 	bl	8001420 <HAL_GetTick>
 80021de:	0003      	movs	r3, r0
 80021e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff f91c 	bl	8001420 <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e275      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	4b80      	ldr	r3, [pc, #512]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	029b      	lsls	r3, r3, #10
 80021fe:	4013      	ands	r3, r2
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x118>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2202      	movs	r2, #2
 800220c:	4013      	ands	r3, r2
 800220e:	d100      	bne.n	8002212 <HAL_RCC_OscConfig+0x146>
 8002210:	e069      	b.n	80022e6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002212:	4b79      	ldr	r3, [pc, #484]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	220c      	movs	r2, #12
 8002218:	4013      	ands	r3, r2
 800221a:	d00b      	beq.n	8002234 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800221c:	4b76      	ldr	r3, [pc, #472]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	220c      	movs	r2, #12
 8002222:	4013      	ands	r3, r2
 8002224:	2b08      	cmp	r3, #8
 8002226:	d11c      	bne.n	8002262 <HAL_RCC_OscConfig+0x196>
 8002228:	4b73      	ldr	r3, [pc, #460]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	2380      	movs	r3, #128	@ 0x80
 800222e:	025b      	lsls	r3, r3, #9
 8002230:	4013      	ands	r3, r2
 8002232:	d116      	bne.n	8002262 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002234:	4b70      	ldr	r3, [pc, #448]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2202      	movs	r2, #2
 800223a:	4013      	ands	r3, r2
 800223c:	d005      	beq.n	800224a <HAL_RCC_OscConfig+0x17e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e24b      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224a:	4b6b      	ldr	r3, [pc, #428]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	22f8      	movs	r2, #248	@ 0xf8
 8002250:	4393      	bics	r3, r2
 8002252:	0019      	movs	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	00da      	lsls	r2, r3, #3
 800225a:	4b67      	ldr	r3, [pc, #412]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002260:	e041      	b.n	80022e6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d024      	beq.n	80022b4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800226a:	4b63      	ldr	r3, [pc, #396]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b62      	ldr	r3, [pc, #392]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002270:	2101      	movs	r1, #1
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff f8d3 	bl	8001420 <HAL_GetTick>
 800227a:	0003      	movs	r3, r0
 800227c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002280:	f7ff f8ce 	bl	8001420 <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e227      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	4b59      	ldr	r3, [pc, #356]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2202      	movs	r2, #2
 8002298:	4013      	ands	r3, r2
 800229a:	d0f1      	beq.n	8002280 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b56      	ldr	r3, [pc, #344]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	22f8      	movs	r2, #248	@ 0xf8
 80022a2:	4393      	bics	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	00da      	lsls	r2, r3, #3
 80022ac:	4b52      	ldr	r3, [pc, #328]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e018      	b.n	80022e6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b4:	4b50      	ldr	r3, [pc, #320]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b4f      	ldr	r3, [pc, #316]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	438a      	bics	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff f8ae 	bl	8001420 <HAL_GetTick>
 80022c4:	0003      	movs	r3, r0
 80022c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ca:	f7ff f8a9 	bl	8001420 <HAL_GetTick>
 80022ce:	0002      	movs	r2, r0
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e202      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022dc:	4b46      	ldr	r3, [pc, #280]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2202      	movs	r2, #2
 80022e2:	4013      	ands	r3, r2
 80022e4:	d1f1      	bne.n	80022ca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2208      	movs	r2, #8
 80022ec:	4013      	ands	r3, r2
 80022ee:	d036      	beq.n	800235e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d019      	beq.n	800232c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f8:	4b3f      	ldr	r3, [pc, #252]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80022fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022fc:	4b3e      	ldr	r3, [pc, #248]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80022fe:	2101      	movs	r1, #1
 8002300:	430a      	orrs	r2, r1
 8002302:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7ff f88c 	bl	8001420 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230e:	f7ff f887 	bl	8001420 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e1e0      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002320:	4b35      	ldr	r3, [pc, #212]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	2202      	movs	r2, #2
 8002326:	4013      	ands	r3, r2
 8002328:	d0f1      	beq.n	800230e <HAL_RCC_OscConfig+0x242>
 800232a:	e018      	b.n	800235e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232c:	4b32      	ldr	r3, [pc, #200]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800232e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002330:	4b31      	ldr	r3, [pc, #196]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002332:	2101      	movs	r1, #1
 8002334:	438a      	bics	r2, r1
 8002336:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7ff f872 	bl	8001420 <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002342:	f7ff f86d 	bl	8001420 <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e1c6      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	4b28      	ldr	r3, [pc, #160]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	2202      	movs	r2, #2
 800235a:	4013      	ands	r3, r2
 800235c:	d1f1      	bne.n	8002342 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2204      	movs	r2, #4
 8002364:	4013      	ands	r3, r2
 8002366:	d100      	bne.n	800236a <HAL_RCC_OscConfig+0x29e>
 8002368:	e0b4      	b.n	80024d4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236a:	201f      	movs	r0, #31
 800236c:	183b      	adds	r3, r7, r0
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002372:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	2380      	movs	r3, #128	@ 0x80
 8002378:	055b      	lsls	r3, r3, #21
 800237a:	4013      	ands	r3, r2
 800237c:	d110      	bne.n	80023a0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	4b1e      	ldr	r3, [pc, #120]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 8002384:	2180      	movs	r1, #128	@ 0x80
 8002386:	0549      	lsls	r1, r1, #21
 8002388:	430a      	orrs	r2, r1
 800238a:	61da      	str	r2, [r3, #28]
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	055b      	lsls	r3, r3, #21
 8002394:	4013      	ands	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800239a:	183b      	adds	r3, r7, r0
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <HAL_RCC_OscConfig+0x338>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	d11a      	bne.n	80023e2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ac:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <HAL_RCC_OscConfig+0x338>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <HAL_RCC_OscConfig+0x338>)
 80023b2:	2180      	movs	r1, #128	@ 0x80
 80023b4:	0049      	lsls	r1, r1, #1
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ba:	f7ff f831 	bl	8001420 <HAL_GetTick>
 80023be:	0003      	movs	r3, r0
 80023c0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c4:	f7ff f82c 	bl	8001420 <HAL_GetTick>
 80023c8:	0002      	movs	r2, r0
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	@ 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e185      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <HAL_RCC_OscConfig+0x338>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	2380      	movs	r3, #128	@ 0x80
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4013      	ands	r3, r2
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10e      	bne.n	8002408 <HAL_RCC_OscConfig+0x33c>
 80023ea:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	4b02      	ldr	r3, [pc, #8]	@ (80023f8 <HAL_RCC_OscConfig+0x32c>)
 80023f0:	2101      	movs	r1, #1
 80023f2:	430a      	orrs	r2, r1
 80023f4:	621a      	str	r2, [r3, #32]
 80023f6:	e035      	b.n	8002464 <HAL_RCC_OscConfig+0x398>
 80023f8:	40021000 	.word	0x40021000
 80023fc:	fffeffff 	.word	0xfffeffff
 8002400:	fffbffff 	.word	0xfffbffff
 8002404:	40007000 	.word	0x40007000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0x35e>
 8002410:	4bb6      	ldr	r3, [pc, #728]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002412:	6a1a      	ldr	r2, [r3, #32]
 8002414:	4bb5      	ldr	r3, [pc, #724]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	621a      	str	r2, [r3, #32]
 800241c:	4bb3      	ldr	r3, [pc, #716]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800241e:	6a1a      	ldr	r2, [r3, #32]
 8002420:	4bb2      	ldr	r3, [pc, #712]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002422:	2104      	movs	r1, #4
 8002424:	438a      	bics	r2, r1
 8002426:	621a      	str	r2, [r3, #32]
 8002428:	e01c      	b.n	8002464 <HAL_RCC_OscConfig+0x398>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x380>
 8002432:	4bae      	ldr	r3, [pc, #696]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	4bad      	ldr	r3, [pc, #692]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002438:	2104      	movs	r1, #4
 800243a:	430a      	orrs	r2, r1
 800243c:	621a      	str	r2, [r3, #32]
 800243e:	4bab      	ldr	r3, [pc, #684]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002440:	6a1a      	ldr	r2, [r3, #32]
 8002442:	4baa      	ldr	r3, [pc, #680]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002444:	2101      	movs	r1, #1
 8002446:	430a      	orrs	r2, r1
 8002448:	621a      	str	r2, [r3, #32]
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0x398>
 800244c:	4ba7      	ldr	r3, [pc, #668]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	4ba6      	ldr	r3, [pc, #664]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002452:	2101      	movs	r1, #1
 8002454:	438a      	bics	r2, r1
 8002456:	621a      	str	r2, [r3, #32]
 8002458:	4ba4      	ldr	r3, [pc, #656]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	4ba3      	ldr	r3, [pc, #652]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800245e:	2104      	movs	r1, #4
 8002460:	438a      	bics	r2, r1
 8002462:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d014      	beq.n	8002496 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246c:	f7fe ffd8 	bl	8001420 <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	e009      	b.n	800248a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe ffd3 	bl	8001420 <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	4a9b      	ldr	r2, [pc, #620]	@ (80026f0 <HAL_RCC_OscConfig+0x624>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e12b      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248a:	4b98      	ldr	r3, [pc, #608]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	2202      	movs	r2, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x3aa>
 8002494:	e013      	b.n	80024be <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002496:	f7fe ffc3 	bl	8001420 <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249e:	e009      	b.n	80024b4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a0:	f7fe ffbe 	bl	8001420 <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	4a91      	ldr	r2, [pc, #580]	@ (80026f0 <HAL_RCC_OscConfig+0x624>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e116      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	4b8d      	ldr	r3, [pc, #564]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	2202      	movs	r2, #2
 80024ba:	4013      	ands	r3, r2
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024be:	231f      	movs	r3, #31
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c8:	4b88      	ldr	r3, [pc, #544]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	4b87      	ldr	r3, [pc, #540]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80024ce:	4989      	ldr	r1, [pc, #548]	@ (80026f4 <HAL_RCC_OscConfig+0x628>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2210      	movs	r2, #16
 80024da:	4013      	ands	r3, r2
 80024dc:	d063      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d12a      	bne.n	800253c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024e6:	4b81      	ldr	r3, [pc, #516]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80024e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ea:	4b80      	ldr	r3, [pc, #512]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80024ec:	2104      	movs	r1, #4
 80024ee:	430a      	orrs	r2, r1
 80024f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80024f2:	4b7e      	ldr	r3, [pc, #504]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80024f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f6:	4b7d      	ldr	r3, [pc, #500]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80024f8:	2101      	movs	r1, #1
 80024fa:	430a      	orrs	r2, r1
 80024fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7fe ff8f 	bl	8001420 <HAL_GetTick>
 8002502:	0003      	movs	r3, r0
 8002504:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002508:	f7fe ff8a 	bl	8001420 <HAL_GetTick>
 800250c:	0002      	movs	r2, r0
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e0e3      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800251a:	4b74      	ldr	r3, [pc, #464]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800251c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251e:	2202      	movs	r2, #2
 8002520:	4013      	ands	r3, r2
 8002522:	d0f1      	beq.n	8002508 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002524:	4b71      	ldr	r3, [pc, #452]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002528:	22f8      	movs	r2, #248	@ 0xf8
 800252a:	4393      	bics	r3, r2
 800252c:	0019      	movs	r1, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	00da      	lsls	r2, r3, #3
 8002534:	4b6d      	ldr	r3, [pc, #436]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002536:	430a      	orrs	r2, r1
 8002538:	635a      	str	r2, [r3, #52]	@ 0x34
 800253a:	e034      	b.n	80025a6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	3305      	adds	r3, #5
 8002542:	d111      	bne.n	8002568 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002544:	4b69      	ldr	r3, [pc, #420]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002548:	4b68      	ldr	r3, [pc, #416]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800254a:	2104      	movs	r1, #4
 800254c:	438a      	bics	r2, r1
 800254e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002550:	4b66      	ldr	r3, [pc, #408]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002554:	22f8      	movs	r2, #248	@ 0xf8
 8002556:	4393      	bics	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	00da      	lsls	r2, r3, #3
 8002560:	4b62      	ldr	r3, [pc, #392]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002562:	430a      	orrs	r2, r1
 8002564:	635a      	str	r2, [r3, #52]	@ 0x34
 8002566:	e01e      	b.n	80025a6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002568:	4b60      	ldr	r3, [pc, #384]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800256a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800256c:	4b5f      	ldr	r3, [pc, #380]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800256e:	2104      	movs	r1, #4
 8002570:	430a      	orrs	r2, r1
 8002572:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002574:	4b5d      	ldr	r3, [pc, #372]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002578:	4b5c      	ldr	r3, [pc, #368]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800257a:	2101      	movs	r1, #1
 800257c:	438a      	bics	r2, r1
 800257e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7fe ff4e 	bl	8001420 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800258a:	f7fe ff49 	bl	8001420 <HAL_GetTick>
 800258e:	0002      	movs	r2, r0
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e0a2      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800259c:	4b53      	ldr	r3, [pc, #332]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800259e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a0:	2202      	movs	r2, #2
 80025a2:	4013      	ands	r3, r2
 80025a4:	d1f1      	bne.n	800258a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d100      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4e4>
 80025ae:	e097      	b.n	80026e0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b0:	4b4e      	ldr	r3, [pc, #312]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	220c      	movs	r2, #12
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d100      	bne.n	80025be <HAL_RCC_OscConfig+0x4f2>
 80025bc:	e06b      	b.n	8002696 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d14c      	bne.n	8002660 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c6:	4b49      	ldr	r3, [pc, #292]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b48      	ldr	r3, [pc, #288]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80025cc:	494a      	ldr	r1, [pc, #296]	@ (80026f8 <HAL_RCC_OscConfig+0x62c>)
 80025ce:	400a      	ands	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7fe ff25 	bl	8001420 <HAL_GetTick>
 80025d6:	0003      	movs	r3, r0
 80025d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe ff20 	bl	8001420 <HAL_GetTick>
 80025e0:	0002      	movs	r2, r0
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e079      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ee:	4b3f      	ldr	r3, [pc, #252]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	049b      	lsls	r3, r3, #18
 80025f6:	4013      	ands	r3, r2
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fa:	4b3c      	ldr	r3, [pc, #240]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80025fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fe:	220f      	movs	r2, #15
 8002600:	4393      	bics	r3, r2
 8002602:	0019      	movs	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002608:	4b38      	ldr	r3, [pc, #224]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800260a:	430a      	orrs	r2, r1
 800260c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800260e:	4b37      	ldr	r3, [pc, #220]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a3a      	ldr	r2, [pc, #232]	@ (80026fc <HAL_RCC_OscConfig+0x630>)
 8002614:	4013      	ands	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	431a      	orrs	r2, r3
 8002622:	4b32      	ldr	r3, [pc, #200]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002624:	430a      	orrs	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b30      	ldr	r3, [pc, #192]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b2f      	ldr	r3, [pc, #188]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800262e:	2180      	movs	r1, #128	@ 0x80
 8002630:	0449      	lsls	r1, r1, #17
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7fe fef3 	bl	8001420 <HAL_GetTick>
 800263a:	0003      	movs	r3, r0
 800263c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe feee 	bl	8001420 <HAL_GetTick>
 8002644:	0002      	movs	r2, r0
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e047      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002652:	4b26      	ldr	r3, [pc, #152]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	049b      	lsls	r3, r3, #18
 800265a:	4013      	ands	r3, r2
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x574>
 800265e:	e03f      	b.n	80026e0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002660:	4b22      	ldr	r3, [pc, #136]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 8002666:	4924      	ldr	r1, [pc, #144]	@ (80026f8 <HAL_RCC_OscConfig+0x62c>)
 8002668:	400a      	ands	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe fed8 	bl	8001420 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe fed3 	bl	8001420 <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e02c      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	4b18      	ldr	r3, [pc, #96]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	049b      	lsls	r3, r3, #18
 8002690:	4013      	ands	r3, r2
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x5aa>
 8002694:	e024      	b.n	80026e0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e01f      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026a2:	4b12      	ldr	r3, [pc, #72]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026a8:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <HAL_RCC_OscConfig+0x620>)
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	2380      	movs	r3, #128	@ 0x80
 80026b2:	025b      	lsls	r3, r3, #9
 80026b4:	401a      	ands	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d10e      	bne.n	80026dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	220f      	movs	r2, #15
 80026c2:	401a      	ands	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	23f0      	movs	r3, #240	@ 0xf0
 80026d0:	039b      	lsls	r3, r3, #14
 80026d2:	401a      	ands	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	0018      	movs	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b008      	add	sp, #32
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	40021000 	.word	0x40021000
 80026f0:	00001388 	.word	0x00001388
 80026f4:	efffffff 	.word	0xefffffff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	ffc2ffff 	.word	0xffc2ffff

08002700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b3      	b.n	800287c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b5b      	ldr	r3, [pc, #364]	@ (8002884 <HAL_RCC_ClockConfig+0x184>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	4013      	ands	r3, r2
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d911      	bls.n	8002746 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b58      	ldr	r3, [pc, #352]	@ (8002884 <HAL_RCC_ClockConfig+0x184>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2201      	movs	r2, #1
 8002728:	4393      	bics	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	4b55      	ldr	r3, [pc, #340]	@ (8002884 <HAL_RCC_ClockConfig+0x184>)
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002734:	4b53      	ldr	r3, [pc, #332]	@ (8002884 <HAL_RCC_ClockConfig+0x184>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	4013      	ands	r3, r2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e09a      	b.n	800287c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2202      	movs	r2, #2
 800274c:	4013      	ands	r3, r2
 800274e:	d015      	beq.n	800277c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2204      	movs	r2, #4
 8002756:	4013      	ands	r3, r2
 8002758:	d006      	beq.n	8002768 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800275a:	4b4b      	ldr	r3, [pc, #300]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4b4a      	ldr	r3, [pc, #296]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 8002760:	21e0      	movs	r1, #224	@ 0xe0
 8002762:	00c9      	lsls	r1, r1, #3
 8002764:	430a      	orrs	r2, r1
 8002766:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b47      	ldr	r3, [pc, #284]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	22f0      	movs	r2, #240	@ 0xf0
 800276e:	4393      	bics	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	4b44      	ldr	r3, [pc, #272]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 8002778:	430a      	orrs	r2, r1
 800277a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2201      	movs	r2, #1
 8002782:	4013      	ands	r3, r2
 8002784:	d040      	beq.n	8002808 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b3e      	ldr	r3, [pc, #248]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	2380      	movs	r3, #128	@ 0x80
 8002794:	029b      	lsls	r3, r3, #10
 8002796:	4013      	ands	r3, r2
 8002798:	d114      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06e      	b.n	800287c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a6:	4b38      	ldr	r3, [pc, #224]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	049b      	lsls	r3, r3, #18
 80027ae:	4013      	ands	r3, r2
 80027b0:	d108      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e062      	b.n	800287c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b6:	4b34      	ldr	r3, [pc, #208]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e05b      	b.n	800287c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c4:	4b30      	ldr	r3, [pc, #192]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	4393      	bics	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d8:	f7fe fe22 	bl	8001420 <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e0:	e009      	b.n	80027f6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e2:	f7fe fe1d 	bl	8001420 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	4a27      	ldr	r2, [pc, #156]	@ (800288c <HAL_RCC_ClockConfig+0x18c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e042      	b.n	800287c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	4b24      	ldr	r3, [pc, #144]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	220c      	movs	r2, #12
 80027fc:	401a      	ands	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	429a      	cmp	r2, r3
 8002806:	d1ec      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002808:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <HAL_RCC_ClockConfig+0x184>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2201      	movs	r2, #1
 800280e:	4013      	ands	r3, r2
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d211      	bcs.n	800283a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_RCC_ClockConfig+0x184>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2201      	movs	r2, #1
 800281c:	4393      	bics	r3, r2
 800281e:	0019      	movs	r1, r3
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <HAL_RCC_ClockConfig+0x184>)
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002828:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <HAL_RCC_ClockConfig+0x184>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2201      	movs	r2, #1
 800282e:	4013      	ands	r3, r2
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d001      	beq.n	800283a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e020      	b.n	800287c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2204      	movs	r2, #4
 8002840:	4013      	ands	r3, r2
 8002842:	d009      	beq.n	8002858 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a11      	ldr	r2, [pc, #68]	@ (8002890 <HAL_RCC_ClockConfig+0x190>)
 800284a:	4013      	ands	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002858:	f000 f820 	bl	800289c <HAL_RCC_GetSysClockFreq>
 800285c:	0001      	movs	r1, r0
 800285e:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <HAL_RCC_ClockConfig+0x188>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	220f      	movs	r2, #15
 8002866:	4013      	ands	r3, r2
 8002868:	4a0a      	ldr	r2, [pc, #40]	@ (8002894 <HAL_RCC_ClockConfig+0x194>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	000a      	movs	r2, r1
 800286e:	40da      	lsrs	r2, r3
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <HAL_RCC_ClockConfig+0x198>)
 8002872:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002874:	2000      	movs	r0, #0
 8002876:	f7fe fd8d 	bl	8001394 <HAL_InitTick>
  
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b004      	add	sp, #16
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40022000 	.word	0x40022000
 8002888:	40021000 	.word	0x40021000
 800288c:	00001388 	.word	0x00001388
 8002890:	fffff8ff 	.word	0xfffff8ff
 8002894:	0800301c 	.word	0x0800301c
 8002898:	20000000 	.word	0x20000000

0800289c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028b6:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	220c      	movs	r2, #12
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d002      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x30>
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x36>
 80028ca:	e02c      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ce:	613b      	str	r3, [r7, #16]
      break;
 80028d0:	e02c      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	0c9b      	lsrs	r3, r3, #18
 80028d6:	220f      	movs	r2, #15
 80028d8:	4013      	ands	r3, r2
 80028da:	4a19      	ldr	r2, [pc, #100]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028e0:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e4:	220f      	movs	r2, #15
 80028e6:	4013      	ands	r3, r2
 80028e8:	4a16      	ldr	r2, [pc, #88]	@ (8002944 <HAL_RCC_GetSysClockFreq+0xa8>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	025b      	lsls	r3, r3, #9
 80028f4:	4013      	ands	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	4810      	ldr	r0, [pc, #64]	@ (800293c <HAL_RCC_GetSysClockFreq+0xa0>)
 80028fc:	f7fd fc04 	bl	8000108 <__udivsi3>
 8002900:	0003      	movs	r3, r0
 8002902:	001a      	movs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4353      	muls	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e009      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	000a      	movs	r2, r1
 8002910:	0152      	lsls	r2, r2, #5
 8002912:	1a52      	subs	r2, r2, r1
 8002914:	0193      	lsls	r3, r2, #6
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	185b      	adds	r3, r3, r1
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	613b      	str	r3, [r7, #16]
      break;
 8002924:	e002      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002926:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002928:	613b      	str	r3, [r7, #16]
      break;
 800292a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800292c:	693b      	ldr	r3, [r7, #16]
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b006      	add	sp, #24
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	40021000 	.word	0x40021000
 800293c:	007a1200 	.word	0x007a1200
 8002940:	0800302c 	.word	0x0800302c
 8002944:	0800303c 	.word	0x0800303c

08002948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e042      	b.n	80029e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	223d      	movs	r2, #61	@ 0x3d
 800295e:	5c9b      	ldrb	r3, [r3, r2]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d107      	bne.n	8002976 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	223c      	movs	r2, #60	@ 0x3c
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f7fe fc97 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	223d      	movs	r2, #61	@ 0x3d
 800297a:	2102      	movs	r1, #2
 800297c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	0019      	movs	r1, r3
 8002988:	0010      	movs	r0, r2
 800298a:	f000 f94b 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2246      	movs	r2, #70	@ 0x46
 8002992:	2101      	movs	r1, #1
 8002994:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	223e      	movs	r2, #62	@ 0x3e
 800299a:	2101      	movs	r1, #1
 800299c:	5499      	strb	r1, [r3, r2]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	223f      	movs	r2, #63	@ 0x3f
 80029a2:	2101      	movs	r1, #1
 80029a4:	5499      	strb	r1, [r3, r2]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2240      	movs	r2, #64	@ 0x40
 80029aa:	2101      	movs	r1, #1
 80029ac:	5499      	strb	r1, [r3, r2]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2241      	movs	r2, #65	@ 0x41
 80029b2:	2101      	movs	r1, #1
 80029b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2242      	movs	r2, #66	@ 0x42
 80029ba:	2101      	movs	r1, #1
 80029bc:	5499      	strb	r1, [r3, r2]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2243      	movs	r2, #67	@ 0x43
 80029c2:	2101      	movs	r1, #1
 80029c4:	5499      	strb	r1, [r3, r2]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2244      	movs	r2, #68	@ 0x44
 80029ca:	2101      	movs	r1, #1
 80029cc:	5499      	strb	r1, [r3, r2]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2245      	movs	r2, #69	@ 0x45
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	223d      	movs	r2, #61	@ 0x3d
 80029da:	2101      	movs	r1, #1
 80029dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b002      	add	sp, #8
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	223d      	movs	r2, #61	@ 0x3d
 80029f4:	5c9b      	ldrb	r3, [r3, r2]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d001      	beq.n	8002a00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e033      	b.n	8002a68 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	223d      	movs	r2, #61	@ 0x3d
 8002a04:	2102      	movs	r1, #2
 8002a06:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a18      	ldr	r2, [pc, #96]	@ (8002a70 <HAL_TIM_Base_Start+0x88>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00f      	beq.n	8002a32 <HAL_TIM_Base_Start+0x4a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	05db      	lsls	r3, r3, #23
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d009      	beq.n	8002a32 <HAL_TIM_Base_Start+0x4a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a14      	ldr	r2, [pc, #80]	@ (8002a74 <HAL_TIM_Base_Start+0x8c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d004      	beq.n	8002a32 <HAL_TIM_Base_Start+0x4a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a12      	ldr	r2, [pc, #72]	@ (8002a78 <HAL_TIM_Base_Start+0x90>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d111      	bne.n	8002a56 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2207      	movs	r2, #7
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b06      	cmp	r3, #6
 8002a42:	d010      	beq.n	8002a66 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2101      	movs	r1, #1
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a54:	e007      	b.n	8002a66 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b004      	add	sp, #16
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40014000 	.word	0x40014000

08002a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a86:	230f      	movs	r3, #15
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	223c      	movs	r2, #60	@ 0x3c
 8002a92:	5c9b      	ldrb	r3, [r3, r2]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_TIM_ConfigClockSource+0x20>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e0bc      	b.n	8002c16 <HAL_TIM_ConfigClockSource+0x19a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	223c      	movs	r2, #60	@ 0x3c
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	223d      	movs	r2, #61	@ 0x3d
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2277      	movs	r2, #119	@ 0x77
 8002ab8:	4393      	bics	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4a58      	ldr	r2, [pc, #352]	@ (8002c20 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2280      	movs	r2, #128	@ 0x80
 8002ad2:	0192      	lsls	r2, r2, #6
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d040      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0xde>
 8002ad8:	2280      	movs	r2, #128	@ 0x80
 8002ada:	0192      	lsls	r2, r2, #6
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d900      	bls.n	8002ae2 <HAL_TIM_ConfigClockSource+0x66>
 8002ae0:	e088      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	0152      	lsls	r2, r2, #5
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d100      	bne.n	8002aec <HAL_TIM_ConfigClockSource+0x70>
 8002aea:	e088      	b.n	8002bfe <HAL_TIM_ConfigClockSource+0x182>
 8002aec:	2280      	movs	r2, #128	@ 0x80
 8002aee:	0152      	lsls	r2, r2, #5
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d900      	bls.n	8002af6 <HAL_TIM_ConfigClockSource+0x7a>
 8002af4:	e07e      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
 8002af6:	2b70      	cmp	r3, #112	@ 0x70
 8002af8:	d018      	beq.n	8002b2c <HAL_TIM_ConfigClockSource+0xb0>
 8002afa:	d900      	bls.n	8002afe <HAL_TIM_ConfigClockSource+0x82>
 8002afc:	e07a      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
 8002afe:	2b60      	cmp	r3, #96	@ 0x60
 8002b00:	d04f      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x126>
 8002b02:	d900      	bls.n	8002b06 <HAL_TIM_ConfigClockSource+0x8a>
 8002b04:	e076      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
 8002b06:	2b50      	cmp	r3, #80	@ 0x50
 8002b08:	d03b      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x106>
 8002b0a:	d900      	bls.n	8002b0e <HAL_TIM_ConfigClockSource+0x92>
 8002b0c:	e072      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
 8002b0e:	2b40      	cmp	r3, #64	@ 0x40
 8002b10:	d057      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x146>
 8002b12:	d900      	bls.n	8002b16 <HAL_TIM_ConfigClockSource+0x9a>
 8002b14:	e06e      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
 8002b16:	2b30      	cmp	r3, #48	@ 0x30
 8002b18:	d063      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x166>
 8002b1a:	d86b      	bhi.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d060      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x166>
 8002b20:	d868      	bhi.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d05d      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x166>
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d05b      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x166>
 8002b2a:	e063      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b3c:	f000 f97a 	bl	8002e34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2277      	movs	r2, #119	@ 0x77
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]
      break;
 8002b58:	e052      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b6a:	f000 f963 	bl	8002e34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2180      	movs	r1, #128	@ 0x80
 8002b7a:	01c9      	lsls	r1, r1, #7
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	609a      	str	r2, [r3, #8]
      break;
 8002b80:	e03e      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8e:	001a      	movs	r2, r3
 8002b90:	f000 f8d6 	bl	8002d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2150      	movs	r1, #80	@ 0x50
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 f930 	bl	8002e00 <TIM_ITRx_SetConfig>
      break;
 8002ba0:	e02e      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bae:	001a      	movs	r2, r3
 8002bb0:	f000 f8f4 	bl	8002d9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2160      	movs	r1, #96	@ 0x60
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 f920 	bl	8002e00 <TIM_ITRx_SetConfig>
      break;
 8002bc0:	e01e      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	001a      	movs	r2, r3
 8002bd0:	f000 f8b6 	bl	8002d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2140      	movs	r1, #64	@ 0x40
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 f910 	bl	8002e00 <TIM_ITRx_SetConfig>
      break;
 8002be0:	e00e      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	0019      	movs	r1, r3
 8002bec:	0010      	movs	r0, r2
 8002bee:	f000 f907 	bl	8002e00 <TIM_ITRx_SetConfig>
      break;
 8002bf2:	e005      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002bf4:	230f      	movs	r3, #15
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
      break;
 8002bfc:	e000      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002bfe:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	223d      	movs	r2, #61	@ 0x3d
 8002c04:	2101      	movs	r1, #1
 8002c06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	223c      	movs	r2, #60	@ 0x3c
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	5499      	strb	r1, [r3, r2]

  return status;
 8002c10:	230f      	movs	r3, #15
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	781b      	ldrb	r3, [r3, #0]
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b004      	add	sp, #16
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	ffff00ff 	.word	0xffff00ff

08002c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a3b      	ldr	r2, [pc, #236]	@ (8002d24 <TIM_Base_SetConfig+0x100>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d008      	beq.n	8002c4e <TIM_Base_SetConfig+0x2a>
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	2380      	movs	r3, #128	@ 0x80
 8002c40:	05db      	lsls	r3, r3, #23
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d003      	beq.n	8002c4e <TIM_Base_SetConfig+0x2a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a37      	ldr	r2, [pc, #220]	@ (8002d28 <TIM_Base_SetConfig+0x104>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d108      	bne.n	8002c60 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2270      	movs	r2, #112	@ 0x70
 8002c52:	4393      	bics	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a30      	ldr	r2, [pc, #192]	@ (8002d24 <TIM_Base_SetConfig+0x100>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d018      	beq.n	8002c9a <TIM_Base_SetConfig+0x76>
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	2380      	movs	r3, #128	@ 0x80
 8002c6c:	05db      	lsls	r3, r3, #23
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d013      	beq.n	8002c9a <TIM_Base_SetConfig+0x76>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2c      	ldr	r2, [pc, #176]	@ (8002d28 <TIM_Base_SetConfig+0x104>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00f      	beq.n	8002c9a <TIM_Base_SetConfig+0x76>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d2c <TIM_Base_SetConfig+0x108>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00b      	beq.n	8002c9a <TIM_Base_SetConfig+0x76>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2a      	ldr	r2, [pc, #168]	@ (8002d30 <TIM_Base_SetConfig+0x10c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <TIM_Base_SetConfig+0x76>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a29      	ldr	r2, [pc, #164]	@ (8002d34 <TIM_Base_SetConfig+0x110>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d003      	beq.n	8002c9a <TIM_Base_SetConfig+0x76>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a28      	ldr	r2, [pc, #160]	@ (8002d38 <TIM_Base_SetConfig+0x114>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d108      	bne.n	8002cac <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a27      	ldr	r2, [pc, #156]	@ (8002d3c <TIM_Base_SetConfig+0x118>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2280      	movs	r2, #128	@ 0x80
 8002cb0:	4393      	bics	r3, r2
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a13      	ldr	r2, [pc, #76]	@ (8002d24 <TIM_Base_SetConfig+0x100>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_Base_SetConfig+0xce>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a14      	ldr	r2, [pc, #80]	@ (8002d30 <TIM_Base_SetConfig+0x10c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <TIM_Base_SetConfig+0xce>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <TIM_Base_SetConfig+0x110>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <TIM_Base_SetConfig+0xce>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <TIM_Base_SetConfig+0x114>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d103      	bne.n	8002cfa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2201      	movs	r2, #1
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2201      	movs	r2, #1
 8002d12:	4393      	bics	r3, r2
 8002d14:	001a      	movs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	611a      	str	r2, [r3, #16]
  }
}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b004      	add	sp, #16
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40002000 	.word	0x40002000
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	fffffcff 	.word	0xfffffcff

08002d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4393      	bics	r3, r2
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	22f0      	movs	r2, #240	@ 0xf0
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	220a      	movs	r2, #10
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	621a      	str	r2, [r3, #32]
}
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b006      	add	sp, #24
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	2210      	movs	r2, #16
 8002db4:	4393      	bics	r3, r2
 8002db6:	001a      	movs	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002dfc <TIM_TI2_ConfigInputStage+0x60>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	031b      	lsls	r3, r3, #12
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	22a0      	movs	r2, #160	@ 0xa0
 8002dd8:	4393      	bics	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	621a      	str	r2, [r3, #32]
}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b006      	add	sp, #24
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	ffff0fff 	.word	0xffff0fff

08002e00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2270      	movs	r2, #112	@ 0x70
 8002e14:	4393      	bics	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	2207      	movs	r2, #7
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	609a      	str	r2, [r3, #8]
}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b004      	add	sp, #16
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <TIM_ETR_SetConfig+0x3c>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	021a      	lsls	r2, r3, #8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	609a      	str	r2, [r3, #8]
}
 8002e68:	46c0      	nop			@ (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b006      	add	sp, #24
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	ffff00ff 	.word	0xffff00ff

08002e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	223c      	movs	r2, #60	@ 0x3c
 8002e82:	5c9b      	ldrb	r3, [r3, r2]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e047      	b.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	223c      	movs	r2, #60	@ 0x3c
 8002e90:	2101      	movs	r1, #1
 8002e92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	223d      	movs	r2, #61	@ 0x3d
 8002e98:	2102      	movs	r1, #2
 8002e9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2270      	movs	r2, #112	@ 0x70
 8002eb0:	4393      	bics	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a16      	ldr	r2, [pc, #88]	@ (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00f      	beq.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2380      	movs	r3, #128	@ 0x80
 8002ed6:	05db      	lsls	r3, r3, #23
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d009      	beq.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a11      	ldr	r2, [pc, #68]	@ (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a10      	ldr	r2, [pc, #64]	@ (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d10c      	bne.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2280      	movs	r2, #128	@ 0x80
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	223d      	movs	r2, #61	@ 0x3d
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	223c      	movs	r2, #60	@ 0x3c
 8002f16:	2100      	movs	r1, #0
 8002f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b004      	add	sp, #16
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40014000 	.word	0x40014000

08002f30 <memset>:
 8002f30:	0003      	movs	r3, r0
 8002f32:	1882      	adds	r2, r0, r2
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d100      	bne.n	8002f3a <memset+0xa>
 8002f38:	4770      	bx	lr
 8002f3a:	7019      	strb	r1, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	e7f9      	b.n	8002f34 <memset+0x4>

08002f40 <__libc_init_array>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	2600      	movs	r6, #0
 8002f44:	4c0c      	ldr	r4, [pc, #48]	@ (8002f78 <__libc_init_array+0x38>)
 8002f46:	4d0d      	ldr	r5, [pc, #52]	@ (8002f7c <__libc_init_array+0x3c>)
 8002f48:	1b64      	subs	r4, r4, r5
 8002f4a:	10a4      	asrs	r4, r4, #2
 8002f4c:	42a6      	cmp	r6, r4
 8002f4e:	d109      	bne.n	8002f64 <__libc_init_array+0x24>
 8002f50:	2600      	movs	r6, #0
 8002f52:	f000 f819 	bl	8002f88 <_init>
 8002f56:	4c0a      	ldr	r4, [pc, #40]	@ (8002f80 <__libc_init_array+0x40>)
 8002f58:	4d0a      	ldr	r5, [pc, #40]	@ (8002f84 <__libc_init_array+0x44>)
 8002f5a:	1b64      	subs	r4, r4, r5
 8002f5c:	10a4      	asrs	r4, r4, #2
 8002f5e:	42a6      	cmp	r6, r4
 8002f60:	d105      	bne.n	8002f6e <__libc_init_array+0x2e>
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	00b3      	lsls	r3, r6, #2
 8002f66:	58eb      	ldr	r3, [r5, r3]
 8002f68:	4798      	blx	r3
 8002f6a:	3601      	adds	r6, #1
 8002f6c:	e7ee      	b.n	8002f4c <__libc_init_array+0xc>
 8002f6e:	00b3      	lsls	r3, r6, #2
 8002f70:	58eb      	ldr	r3, [r5, r3]
 8002f72:	4798      	blx	r3
 8002f74:	3601      	adds	r6, #1
 8002f76:	e7f2      	b.n	8002f5e <__libc_init_array+0x1e>
 8002f78:	0800304c 	.word	0x0800304c
 8002f7c:	0800304c 	.word	0x0800304c
 8002f80:	08003050 	.word	0x08003050
 8002f84:	0800304c 	.word	0x0800304c

08002f88 <_init>:
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8e:	bc08      	pop	{r3}
 8002f90:	469e      	mov	lr, r3
 8002f92:	4770      	bx	lr

08002f94 <_fini>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9a:	bc08      	pop	{r3}
 8002f9c:	469e      	mov	lr, r3
 8002f9e:	4770      	bx	lr
